{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\ui/assets\\scripts\\battle\\ui\\HeroPosArrow.js"],"names":["Tools","require","GameData","UtilPhysics","TEAM_COLOR","HeroPosArrow","cc","Class","extends","Component","properties","rootNode","Node","ballNode","keyNode","centerNode","triangleNode","_player","_otherPlayer","_camera","_width","_height","_rect","_worldRect","_otherRect","_needUpdate","localPos","otherPos","init","localPlayer","otherPlayer","camera","tid","teamID","color","active","isKey","instance","screenWidth","screenHeight","rect","defenceRect","getRect","width","height","changeLocalPlayer","player","getArrowPos","_localPos","pos","checkMovePointCollideRectReturnHitPos","sub","setActive","update","dt","isDead","node","position","center","zoomRatio","intersects","result","_deg","misc","radiansToDegrees","Math","atan2","y","x","rotation"],"mappings":"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","file":"HeroPosArrow.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\ui","sourcesContent":["/**\n * @fileoverview 玩家缩略点展示\n * @author meifan@gameley.cn (梅凡)\n */\n\nconst Tools = require('Tools');\nconst GameData = require('GameData');\nconst UtilPhysics = require(\"UtilPhysics\");\nconst TEAM_COLOR = require('Types').TEAM_COLOR;\n\nconst HeroPosArrow = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rootNode: cc.Node,\n        ballNode: cc.Node,\n        keyNode: cc.Node,\n\n        centerNode: cc.Node,\n        triangleNode: cc.Node,\n\n        _player: null,\n        _otherPlayer: null,\n        _camera: null,\n        _width: 0,\n        _height: 0,\n        _rect: null,\n        _worldRect: null,\n        _otherRect: null,\n        _needUpdate: true,\n        localPos: null,\n        otherPos: null,\n    },\n\n    init: function (localPlayer, otherPlayer, camera) {\n        const tid = otherPlayer.teamID;\n        this.ballNode.color = TEAM_COLOR[tid];\n        this.triangleNode.color = TEAM_COLOR[tid];\n\n        this.keyNode.active = otherPlayer.isKey;\n        this.ballNode.active = !otherPlayer.isKey;\n\n        this._player = localPlayer;\n        this._otherPlayer = otherPlayer;\n        this._camera = camera;\n\n        this._width = GameData.instance.screenWidth;\n        this._height = GameData.instance.screenHeight;\n\n        this._rect = new cc.rect(-this._width * 0.9 / 2, -this._height * 0.9 / 2, this._width * 0.9, this._height * 0.9);\n\n        this._worldRect = new cc.rect(-this._width / 2, -this._height / 2, this._width, this._height);\n        this._otherRect = new cc.rect(0, 0, otherPlayer.defenceRect.getRect().width, otherPlayer.defenceRect.getRect().height);\n\n        this._needUpdate = true;\n\n    },\n\n    changeLocalPlayer(player) {\n        this._player = player;\n    },\n\n    getArrowPos: function (_localPos, pos, rect) {\n        return UtilPhysics.checkMovePointCollideRectReturnHitPos(_localPos, pos.sub(_localPos), rect);\n    },\n\n    setActive: function (active) {\n        if (this.rootNode.active !== active) {\n            this.rootNode.active = active;\n        }\n    },\n\n    update: function (dt) {\n        if (this._needUpdate) {\n            if (this._otherPlayer.isDead) {\n                this.setActive(false);\n                this._needUpdate = false;\n                return;\n            }\n\n            if (this._otherPlayer.isKey !== this.keyNode.active) {\n                this.keyNode.active = this._otherPlayer.isKey;\n                this.ballNode.active = !this._otherPlayer.isKey;\n            }\n\n            this.localPos = this._player.node.position.sub(this._camera.node.position);\n            this.otherPos = this._otherPlayer.node.position.sub(this._camera.node.position);\n            // const v2 = this._camera.getCameraToWorldMatrix(cc.v2(this._width, this._height)).sub(this._camera.node.position);\n            // this._rect.width = v2.x;\n            // this._rect.height = v2.y;\n\n            this._worldRect.center = this.localPos;\n            this._worldRect.width = this._width / this._camera.zoomRatio;\n            this._worldRect.height = this._height / this._camera.zoomRatio;\n            // console.log('worldToCamera: ' + v2 + ', self: ' + cc.v2(this._width / this._camera.zoomRatio, this._height / this._camera.zoomRatio));\n            this._otherRect.center = this.otherPos;\n            this._otherRect.width = this._otherPlayer.defenceRect.getRect().width;\n            this._otherRect.height = this._otherPlayer.defenceRect.getRect().height;\n\n            if (this._worldRect.intersects(this._otherRect)) {\n                this.setActive(false);\n            } else {\n                this.setActive(true);\n                const result = this.getArrowPos(this.localPos, this.otherPos, this._rect);\n                if (result[0]) {\n                    this.node.position = result[1];\n                }\n            }\n\n            this._deg = cc.misc.radiansToDegrees(Math.atan2(this.otherPos.y, this.otherPos.x));\n            this.centerNode.rotation = -this._deg;\n\n            // console.log('active : ' + this.node.active + ', pos: ' + this.node.position);\n        }\n    }\n\n});"]}