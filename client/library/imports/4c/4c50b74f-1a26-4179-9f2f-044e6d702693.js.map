{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\system/assets\\scripts\\battle\\system\\KnifeCollisionHandleSystem.js"],"names":["BaseCollisionHandleSystem","require","KnifeState","VibrateUtil","GameData","Tools","KnifeSkinProperty","KnifeCollisionHandleSystem","cc","Class","extends","properties","_eventListName","default","override","handelCollisionEvent","event","other","self","state","node","parent","getComponent","selfOwner","oldOwner","selfPlayer","isHard","dodgeParam","player","knifeSkin","skin","property","Dodge","propertyParam","group","tag","otherOwner","otherPlayer","weakParam","count","attackPower","defencePower","Attack","getRandomInt","dodgeKnife","throwKnife","addKillKnifeNum","Defence","destroyDefenceKnife","emit","rot","bgNode","width","updateGameLogic","dt","_super","_collisionEventMgr","clearKnifeEvent","collider","otherCollider","instance","localHeroTid","vibrate"],"mappings":"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","file":"KnifeCollisionHandleSystem.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\system","sourcesContent":["/**\n * @fileoverview 刀碰撞事件处理系统\n * @author jinhaitao@gameley.cn (金海涛)\n */\nconst BaseCollisionHandleSystem = require('BaseCollisionHandleSystem');\nconst KnifeState = require('Types').KnifeState;\nconst VibrateUtil = require('VibrateUtil');\nconst GameData = require('GameData');\nconst Tools = require('Tools')\nconst KnifeSkinProperty = require('Types').KnifeSkinProperty;\n/**\n * 专门处理刀碰撞系统\n */\n\nvar KnifeCollisionHandleSystem = cc.Class({\n    extends: BaseCollisionHandleSystem,\n    properties: {\n        _eventListName: {\n            default: '_knifeCollisionEvent',\n            override: true,\n        },\n    },\n\n    /** @override */\n    handelCollisionEvent: function (event) {\n        var other = event[0];\n        var self = event[1];\n\n        var state = self.node.parent.getComponent('KnifeStateComponent').state;\n        var selfOwner = self.node.parent.getComponent('KnifeOwnerComponent').oldOwner;\n        var selfPlayer = null;\n        var isHard = false;\n        var dodgeParam = 0; //闪避几率\n        if (selfOwner) {\n            selfPlayer = selfOwner.getComponent('EntityFollowPlayer').player;\n            isHard = selfPlayer.isHard();\n            var knifeSkin = selfPlayer.skin;\n            if (knifeSkin && knifeSkin.property === KnifeSkinProperty.Dodge) {\n                dodgeParam = knifeSkin.propertyParam;\n            }\n        }\n\n\n        switch (other.node.group) {\n            // case 'otherKnife':\n            case 'knife':\n\n                // 如果是一组的直接跳过\n                if (other.tag === self.tag) {\n                    return;\n                }\n                // tag为0时表示已经丢了\n                if (self.tag === 0) {\n                    return;\n                }\n                // 金刀状态跳过\n                if (isHard) {\n                    return;\n                }\n\n\n                var otherOwner = other.node.parent.getComponent('KnifeOwnerComponent').oldOwner;\n                var otherPlayer = null;\n                if (otherOwner) {\n                    otherPlayer = otherOwner.getComponent('EntityFollowPlayer').player;\n                }\n                var weakParam = 0;\n                if (selfPlayer && otherPlayer) {\n                    var count = (otherPlayer.attackPower - selfPlayer.defencePower) * 5;\n                    weakParam = count > 100 ? 100 : count;\n                    // console.log('weakParam', weakParam)\n                }\n\n                //判断state是否是进攻状态\n                if (state === KnifeState.Attack) {\n                    var count = Tools.getRandomInt(0, 100);\n                    if (count < dodgeParam) {\n                        // console.log('闪避', dodgeParam, count)\n                        this.dodgeKnife(self, other);\n                    } else {\n                        this.throwKnife(self, other);\n                        if (otherPlayer) otherPlayer.addKillKnifeNum();\n                    }\n                } else if (state === KnifeState.Defence && weakParam > 0) {\n                    var count = Tools.getRandomInt(0, 100);\n                    if (count < weakParam) {\n                        this.destroyDefenceKnife(self, other);\n                        if (otherPlayer) otherPlayer.addKillKnifeNum();\n                    }\n                }\n                break;\n            case 'block':\n                if (self.tag === 0) {\n                    return;\n                }\n                // 攻击状态则掉落，防御状态则卡住\n                if (state === KnifeState.Attack) {\n                    if (!isHard) {\n                        this.throwKnife(self, other);\n                    }\n                } else {\n                    //防御状态卡住\n                    self.node.emit('emitEvent', ['stopParentRotate']);\n                }\n\n                break;\n            case 'wall':\n                if (self.tag === 0) {\n                    return;\n                }\n                var rot = 0;\n                // var pos = self.node.parent.convertToWorldSpaceAR(self.node.position);\n                // pos = other.node.parent.parent.convertToNodeSpaceAR(pos);\n                // var detail = {};\n                switch (other.tag) {\n                    case 0: // 上\n                        // pos.y = other.node.parent.y - other.size.height / 2 - self.size.height / 2 + 2;\n                        rot = 180;\n                        break;\n                    case 1: // 下\n                        rot = 0;\n                        // pos.y = other.node.parent.y + other.size.height / 2 + self.size.height / 2 - 2;\n                        break;\n                    case 2: // 左\n                        rot = 90;\n                        // pos.x = other.node.parent.x + other.size.width / 2 + self.size.height / 2 - 2;\n                        break;\n                    case 3: // 右\n                        rot = 270;\n                        // pos.x = other.node.parent.x - other.size.width / 2 - self.size.height / 2 + 2;\n                        break;\n                }\n                // pos = other.node.parent.parent.convertToWorldSpaceAR(pos);\n                // pos = self.node.parent.convertToNodeSpaceAR(pos);\n                // detail.finalPos = pos;\n                self.node.emit('emitEvent', ['fixByWall', [other, rot, other.node.parent.getComponent('EntityWall').bgNode.width / 2]]);\n                break;\n        }\n    },\n\n    updateGameLogic: function (dt) {\n        this._super(dt);\n        this._collisionEventMgr.clearKnifeEvent();\n    },\n\n    throwKnife: function (collider, otherCollider) {\n        //自己的刀振动\n        if (collider.tag === GameData.instance.localHeroTid || otherCollider.tag === GameData.instance.localHeroTid) {\n            VibrateUtil.vibrate();\n            if (collider.tag === GameData.instance.localHeroTid) {\n                collider.node.emit('emitEvent', ['localHeroCollision']);\n            } else if (otherCollider.tag === GameData.instance.localHeroTid) {\n                otherCollider.node.emit('emitEvent', ['localHeroCollision']);\n            }\n        }\n        // 去node中做完判断再改tag\n        collider.node.emit('emitEvent', ['stopParentRotate']);\n        collider.node.emit('emitEvent', ['throwKnife', otherCollider]);\n        this.node.emit('throwKnife', [collider.node, otherCollider.node]);\n    },\n\n    dodgeKnife: function (collider, otherCollider) {\n        this.node.emit('dodgeKnife', [collider.node, otherCollider.node]);\n    },\n\n    destroyDefenceKnife: function (collider, otherCollider) {\n        //自己的刀振动\n        if (collider.tag === GameData.instance.localHeroTid || otherCollider.tag === GameData.instance.localHeroTid) {\n            VibrateUtil.vibrate();\n            if (collider.tag === GameData.instance.localHeroTid) {\n                collider.node.emit('emitEvent', ['localHeroCollision']);\n            } else if (otherCollider.tag === GameData.instance.localHeroTid) {\n                otherCollider.node.emit('emitEvent', ['localHeroCollision']);\n            }\n        }\n        // 去node中做完判断再改tag\n        collider.node.emit('emitEvent', ['stopParentRotate']);\n        collider.node.emit('emitEvent', ['throwKnife', otherCollider]);\n\n        this.node.emit('destroyDefenceKnife', [collider.node, otherCollider.node]);\n    },\n});"]}