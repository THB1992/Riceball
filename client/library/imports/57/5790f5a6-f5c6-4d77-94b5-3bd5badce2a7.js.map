{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\common/assets\\scripts\\common\\PoolMgr.js"],"names":["PoolType","require","Tools","GameData","PoolMgr","cc","Class","extends","Component","statics","instance","properties","poolArray","prefabArray","default","type","Prefab","cleanUp","COUNT","pool","clear","init","NodePool","prefab","count","PLAYER","FOLLOW_PLAYER","KNIFE","BLOCK","BLOCK_01","BLOCK_02","BLOCK_03","BLOCK_04","BLOCK_05","BLOCK_06","BLOCK_07","BLOCK_08","CIRCLE_BLOCK","WALL","CIRCLE_WALL","COLL_EFFECT","BUFF","BOX","SHOW_KNIFE_EFFECT","DODGE_EFFECT","DESTROY_DEFENCE_EFFECT","Effect_Reborn","NEZHA_EFFECT","index","node","instantiate","put","getPlayer","comp","get","getFollowPlayer","getKnife","getBlock","blockType","getCircleBlock","getWall","getCollEffect","getDodgeEffect","getRebornEffect","getDestroyDefenceffect","getNeZhaffect","getShowKnifeEffect","getBuff","getBox","getCircleWall","isShowLog","console","log","_pool","error"],"mappings":";;;;;;AAAA,IAAMA,WAAWC,QAAQ,OAAR,EAAiBD,QAAlC;AACA,IAAME,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,WAAWF,QAAQ,UAAR,CAAjB;;AAEA,IAAMG,UAAUC,GAAGC,KAAH,CAAS;AACrBC,aAASF,GAAGG,SADS;;AAGrBC,aAAS;AACLC,kBAAU;AADL,KAHY;AAMrBC,gBAAY;AACRC,mBAAW,EADH;AAERC,qBAAa;AACTC,qBAAS,EADA;AAETC,kBAAMV,GAAGW;AAFA;AAFL,KANS;;AAcrBC,aAAS,mBAAY;AACjB,aAAK,IAAIF,OAAO,CAAhB,EAAmBA,OAAOf,SAASkB,KAAnC,EAA0CH,MAA1C,EAAkD;AAC9C,gBAAII,OAAO,KAAKP,SAAL,CAAeG,IAAf,CAAX;AACA,gBAAGI,IAAH,EAAS;AACLA,qBAAKC,KAAL;AACH;AACJ;AACD,aAAKR,SAAL,GAAiB,EAAjB;AACH,KAtBoB;;AAwBrBS,UAAM,gBAAY;AACd,aAAK,IAAIN,OAAO,CAAhB,EAAmBA,OAAOf,SAASkB,KAAnC,EAA0CH,MAA1C,EAAkD;AAC9C,gBAAII,OAAO,IAAId,GAAGiB,QAAP,EAAX;AACA,gBAAIC,SAAS,KAAKV,WAAL,CAAiBE,IAAjB,CAAb;AACA,gBAAIS,QAAQ,CAAZ;AACA,oBAAQT,IAAR;AACI,qBAAKf,SAASyB,MAAd;AACID,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAAS0B,aAAd;AACIF,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAAS2B,KAAd;AACIH,4BAAQ,GAAR;AACA;AACJ,qBAAKxB,SAAS4B,KAAd;AACA,qBAAK5B,SAAS6B,QAAd;AACA,qBAAK7B,SAAS8B,QAAd;AACA,qBAAK9B,SAAS+B,QAAd;AACA,qBAAK/B,SAASgC,QAAd;AACA,qBAAKhC,SAASiC,QAAd;AACA,qBAAKjC,SAASkC,QAAd;AACA,qBAAKlC,SAASmC,QAAd;AACA,qBAAKnC,SAASoC,QAAd;AACIZ,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAASqC,YAAd;AACIb,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAASsC,IAAd;AACId,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAASuC,WAAd;AACIf,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAASwC,WAAd;AACIhB,4BAAQ,EAAR;AACA;AACJ,qBAAKxB,SAASyC,IAAd;AACA,qBAAKzC,SAAS0C,GAAd;AACIlB,4BAAQ,EAAR;AACA;AACJ,qBAAKxB,SAAS2C,iBAAd;AACInB,4BAAQ,EAAR;AACA;AACJ,qBAAKxB,SAAS4C,YAAd;AACIpB,4BAAQ,EAAR;AACA;AACJ,qBAAKxB,SAAS6C,sBAAd;AACIrB,4BAAQ,EAAR;AACA;AACJ,qBAAKxB,SAAS8C,aAAd;AACItB,4BAAQ,CAAR;AACA;AACJ,qBAAKxB,SAAS+C,YAAd;AACIvB,4BAAQ,EAAR;AACA;;AAnDR;AAsDA,gBAAIwB,QAAQ,CAAZ;AACA,mBAAOA,QAAQxB,KAAf,EAAsB;AAClB,oBAAIyB,OAAO5C,GAAG6C,WAAH,CAAe3B,MAAf,CAAX;AACAJ,qBAAKgC,GAAL,CAASF,IAAT;AACAD;AACH;AACD,iBAAKpC,SAAL,CAAeG,IAAf,IAAuBI,IAAvB;AACH;AACJ,KA3FoB;;AA+FrBiC,eAAW,qBAAiC;AAAA,YAAvBC,IAAuB,uEAAhB,cAAgB;;AACxC,eAAO,KAAKC,GAAL,CAAStD,SAASyB,MAAlB,EAA0B4B,IAA1B,CAAP;AACH,KAjGoB;;AAmGrBE,qBAAiB,2BAAuC;AAAA,YAA7BF,IAA6B,uEAAtB,oBAAsB;;AACpD,eAAO,KAAKC,GAAL,CAAStD,SAAS0B,aAAlB,EAAiC2B,IAAjC,CAAP;AACH,KArGoB;;AAuGrBG,cAAU,oBAAgC;AAAA,YAAtBH,IAAsB,uEAAf,aAAe;;AACtC,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS2B,KAAlB,EAAyB0B,IAAzB,CAAX;AACA;AACA,eAAOJ,IAAP;AACH,KA3GoB;;AA6GrBQ,cAAU,oBAA4D;AAAA,YAAlDC,SAAkD,uEAAtC1D,SAAS4B,KAA6B;AAAA,YAAtByB,IAAsB,uEAAf,aAAe;;AAClE,eAAO,KAAKC,GAAL,CAASI,SAAT,EAAoBL,IAApB,CAAP;AACH,KA/GoB;;AAiHrBM,oBAAgB,0BAAgC;AAAA,YAAtBN,IAAsB,uEAAf,aAAe;;AAC5C,eAAO,KAAKC,GAAL,CAAStD,SAASqC,YAAlB,EAAgCgB,IAAhC,CAAP;AACH,KAnHoB;;AAqHrBO,aAAS,mBAA+B;AAAA,YAArBP,IAAqB,uEAAd,YAAc;;AACpC,eAAO,KAAKC,GAAL,CAAStD,SAASsC,IAAlB,EAAwBe,IAAxB,CAAP;AACH,KAvHoB;;AAyHrBQ,mBAAe,yBAA+B;AAAA,YAArBR,IAAqB,uEAAd,YAAc;;AAC1C,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAASwC,WAAlB,EAA+Ba,IAA/B,CAAX;AACA,eAAOJ,IAAP;AACH,KA5HoB;;AA8HrBa,oBAAgB,0BAAgC;AAAA,YAAtBT,IAAsB,uEAAf,aAAe;;AAC5C,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS4C,YAAlB,EAAgCS,IAAhC,CAAX;AACA,eAAOJ,IAAP;AACH,KAjIoB;;AAmIrBc,qBAAiB,2BAAiC;AAAA,YAAvBV,IAAuB,uEAAhB,cAAgB;;AAC9C,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS8C,aAAlB,EAAiCO,IAAjC,CAAX;AACA,eAAOJ,IAAP;AACH,KAtIoB;;AAwIrBe,4BAAwB,gCAAUX,IAAV,EAAgB;AACpC,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS6C,sBAAlB,EAA0CQ,IAA1C,CAAX;AACA,eAAOJ,IAAP;AACH,KA3IoB;;AA6IrBgB,mBAAe,uBAAUZ,IAAV,EAAgB;AAC3B,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS+C,YAAlB,EAAgCM,IAAhC,CAAX;AACA,eAAOJ,IAAP;AACH,KAhJoB;;AAkJrBiB,wBAAoB,8BAAoC;AAAA,YAA1Bb,IAA0B,uEAAnB,iBAAmB;;AACpD,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS2C,iBAAlB,EAAqCU,IAArC,CAAX;AACA,eAAOJ,IAAP;AACH,KArJoB;;AAuJrBkB,aAAS,mBAA+B;AAAA,YAArBd,IAAqB,uEAAd,YAAc;;AACpC,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAASyC,IAAlB,EAAwBY,IAAxB,CAAX;AACA,eAAOJ,IAAP;AACH,KA1JoB;;AA4JrBmB,YAAQ,kBAA8B;AAAA,YAApBf,IAAoB,uEAAb,WAAa;;AAClC,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAAS0C,GAAlB,EAAuBW,IAAvB,CAAX;AACA,eAAOJ,IAAP;AACH,KA/JoB;;AAiKrBoB,mBAAe,yBAAqC;AAAA,YAA3BhB,IAA2B,uEAApB,kBAAoB;;AAChD,YAAIJ,OAAO,KAAKK,GAAL,CAAStD,SAASuC,WAAlB,EAA+Bc,IAA/B,CAAX;AACA,eAAOJ,IAAP;AACH,KApKoB;;AAsKrBK,SAAK,aAAUvC,IAAV,EAAgBsC,IAAhB,EAAsB;AACvB,YAAIlC,OAAO,KAAKP,SAAL,CAAeG,IAAf,CAAX;AACA,YAAII,IAAJ,EAAU;AACN,gBAAI8B,OAAO9B,KAAKmC,GAAL,EAAX;AACA,gBAAI,CAACL,IAAL,EAAW;AACP,oBAAI1B,SAAS,KAAKV,WAAL,CAAiBE,IAAjB,CAAb;AACAkC,uBAAO5C,GAAG6C,WAAH,CAAe3B,MAAf,CAAP;AACA,oBAAIpB,SAASO,QAAT,CAAkB4D,SAAlB,EAAJ,EAAmC;AAC/BC,4BAAQC,GAAR,CAAY,gCAAgCzD,IAA5C;AACH;AACJ;AACDkC,iBAAKwB,KAAL,GAAatD,IAAb;AACA,mBAAO8B,IAAP;AACH,SAXD,MAWO;AACH5C,eAAGqE,KAAH,CAAS,6BAA6B3D,IAAtC;AACA,mBAAO,IAAP;AACH;AACJ;;AAID;AA3LqB,CAAT,CAAhB","file":"PoolMgr.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\common","sourcesContent":["const PoolType = require('Types').PoolType;\r\nconst Tools = require('Tools');\r\nconst GameData = require('GameData');\r\n\r\nconst PoolMgr = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        instance: null,\r\n    },\r\n    properties: {\r\n        poolArray: [],\r\n        prefabArray: {\r\n            default: [],\r\n            type: cc.Prefab\r\n        }\r\n    },\r\n\r\n    cleanUp: function () {\r\n        for (let type = 0; type < PoolType.COUNT; type++) {\r\n            var pool = this.poolArray[type];\r\n            if(pool) {\r\n                pool.clear();\r\n            }\r\n        }\r\n        this.poolArray = [];\r\n    },\r\n\r\n    init: function () {\r\n        for (let type = 0; type < PoolType.COUNT; type++) {\r\n            var pool = new cc.NodePool();\r\n            var prefab = this.prefabArray[type];\r\n            var count = 0;\r\n            switch (type) {\r\n                case PoolType.PLAYER:\r\n                    count = 8;\r\n                    break;\r\n                case PoolType.FOLLOW_PLAYER:\r\n                    count = 8;\r\n                    break;\r\n                case PoolType.KNIFE:\r\n                    count = 180;\r\n                    break;\r\n                case PoolType.BLOCK:\r\n                case PoolType.BLOCK_01:\r\n                case PoolType.BLOCK_02:\r\n                case PoolType.BLOCK_03:\r\n                case PoolType.BLOCK_04:\r\n                case PoolType.BLOCK_05:\r\n                case PoolType.BLOCK_06:\r\n                case PoolType.BLOCK_07:\r\n                case PoolType.BLOCK_08:\r\n                    count = 2;\r\n                    break;\r\n                case PoolType.CIRCLE_BLOCK:\r\n                    count = 3;\r\n                    break;\r\n                case PoolType.WALL:\r\n                    count = 4;\r\n                    break;\r\n                case PoolType.CIRCLE_WALL:\r\n                    count = 1;\r\n                    break;\r\n                case PoolType.COLL_EFFECT:\r\n                    count = 50;\r\n                    break;\r\n                case PoolType.BUFF:\r\n                case PoolType.BOX:\r\n                    count = 10;\r\n                    break;\r\n                case PoolType.SHOW_KNIFE_EFFECT:\r\n                    count = 12;\r\n                    break;\r\n                case PoolType.DODGE_EFFECT:\r\n                    count = 20;\r\n                    break;\r\n                case PoolType.DESTROY_DEFENCE_EFFECT:\r\n                    count = 20;\r\n                    break;\r\n                case PoolType.Effect_Reborn:\r\n                    count = 8;\r\n                    break;\r\n                case PoolType.NEZHA_EFFECT:\r\n                    count = 20;\r\n                    break;\r\n\r\n            }\r\n            var index = 0;\r\n            while (index < count) {\r\n                var node = cc.instantiate(prefab);\r\n                pool.put(node);\r\n                index++;\r\n            }\r\n            this.poolArray[type] = pool;\r\n        }\r\n    },\r\n\r\n\r\n\r\n    getPlayer: function (comp = 'EntityPlayer') {\r\n        return this.get(PoolType.PLAYER, comp);\r\n    },\r\n\r\n    getFollowPlayer: function (comp = 'EntityFollowPlayer') {\r\n        return this.get(PoolType.FOLLOW_PLAYER, comp);\r\n    },\r\n\r\n    getKnife: function (comp = 'EntityKnife') {\r\n        var node = this.get(PoolType.KNIFE, comp);\r\n        // console.log(\"getKnife: this.node._pool.count: \" + node._pool._pool.length);\r\n        return node;\r\n    },\r\n\r\n    getBlock: function (blockType = PoolType.BLOCK, comp = 'EntityBlock') {\r\n        return this.get(blockType, comp);\r\n    },\r\n\r\n    getCircleBlock: function (comp = 'EntityBlock') {\r\n        return this.get(PoolType.CIRCLE_BLOCK, comp);\r\n    },\r\n\r\n    getWall: function (comp = 'EntityWall') {\r\n        return this.get(PoolType.WALL, comp);\r\n    },\r\n\r\n    getCollEffect: function (comp = 'CollEffect') {\r\n        var node = this.get(PoolType.COLL_EFFECT, comp);\r\n        return node\r\n    },\r\n\r\n    getDodgeEffect: function (comp = 'DodgeEffect') {\r\n        var node = this.get(PoolType.DODGE_EFFECT, comp);\r\n        return node\r\n    },\r\n\r\n    getRebornEffect: function (comp = 'effectReborn') {\r\n        var node = this.get(PoolType.Effect_Reborn, comp);\r\n        return node;\r\n    },\r\n\r\n    getDestroyDefenceffect: function (comp) {\r\n        var node = this.get(PoolType.DESTROY_DEFENCE_EFFECT, comp);\r\n        return node\r\n    },\r\n\r\n    getNeZhaffect: function (comp) {\r\n        var node = this.get(PoolType.NEZHA_EFFECT, comp);\r\n        return node\r\n    },\r\n\r\n    getShowKnifeEffect: function (comp = 'ShowKnifeEffect') {\r\n        var node = this.get(PoolType.SHOW_KNIFE_EFFECT, comp);\r\n        return node\r\n    },\r\n\r\n    getBuff: function (comp = 'EntityBuff') {\r\n        var node = this.get(PoolType.BUFF, comp);\r\n        return node;\r\n    },\r\n\r\n    getBox: function (comp = 'EntityBox') {\r\n        var node = this.get(PoolType.BOX, comp);\r\n        return node;\r\n    },\r\n\r\n    getCircleWall: function (comp = 'EntityCircleWall') {\r\n        var node = this.get(PoolType.CIRCLE_WALL, comp);\r\n        return node;\r\n    },\r\n\r\n    get: function (type, comp) {\r\n        var pool = this.poolArray[type];\r\n        if (pool) {\r\n            var node = pool.get();\r\n            if (!node) {\r\n                var prefab = this.prefabArray[type];\r\n                node = cc.instantiate(prefab);\r\n                if (GameData.instance.isShowLog()) {\r\n                    console.log('pool of type is not enough:' + type);\r\n                }\r\n            }\r\n            node._pool = pool;\r\n            return node;\r\n        } else {\r\n            cc.error('can\\'t get pool of type:' + type);\r\n            return null;\r\n        }\r\n    },\r\n\r\n\r\n\r\n    // update (dt) {},\r\n});"]}