{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\entity/assets\\scripts\\battle\\entity\\EntityKnife.js"],"names":["Tools","require","EntityBase","KnifeState","GameData","KnifeMomentState","cc","Class","extends","properties","attackNode","Node","skinNode","activeNode","ctx","Graphics","ropeNode","init","tid","itemNode","teamID","shouldRemove","nodeCollider","getOrAddComponent","node","on","changeColliderTag","changeKnifeAttackGroup","changeColliderState","addComponent","knifeColliderListener","knifeMoveCtrl","knifeParentCtrl","knifeColliderNodeCtrl","knifeSkinCtrl","defenceRect","width","height","initWalls","type","knifeFix","refresh","knifeOutOfWall","refreshWalls","knifeStateComp","knifeMomentStateComp","isOnLand","state","Normal","tag","collider","getComponent","Collider","changeID","id","idLabel","string","customID","group","changeNodeGroup","onKnifeViewChange","isInMyView","updateGameLogic","dt","updateLogic","isOut","recycleSelf","emit","drawPos","active","dir","sub","position","mag","rotation","angle","v2","Math","PI","y","parent","draw","pos","reLand","ReleaseFinish","setSage","value"],"mappings":"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","file":"EntityKnife.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\entity","sourcesContent":["/**\n * @fileoverview 飞刀实体\n * @author meifan@gameley.cn (梅凡)\n */\n\nconst Tools = require('Tools');\nconst EntityBase = require('EntityBase');\nconst KnifeState = require('Types').KnifeState;\nconst GameData = require('GameData');\nconst KnifeMomentState = require('Types').KnifeMomentState;\ncc.Class({\n    extends: EntityBase,\n\n    properties: {\n        attackNode: cc.Node,\n        // attackHeroNode: cc.Node,\n        // pickNode: cc.Node,\n        // landNode: cc.Node,\n        skinNode: cc.Node,\n        activeNode: cc.Node,\n        // dislabel: cc.Label,\n        ctx: cc.Graphics,\n        ropeNode: cc.Node,\n        // teamIdLabel: cc.Label,\n        // idLabel: cc.Label,\n    },\n\n    init(tid, itemNode) {\n        this.itemNode = itemNode;\n        this.teamID = tid;\n\n        this.shouldRemove = false;\n\n        this.nodeCollider = Tools.getOrAddComponent(this.attackNode, 'NodeCollider');\n        this.nodeCollider.init(this.node, true, true);\n\n        // this.attackHeroCollider = Tools.getOrAddComponent(this.attackHeroNode, 'NodeCollider');\n        // this.attackHeroCollider.init(this.node, true, true);\n        //TODO nodeCollider 需要设置初始队伍 changeColliderTag\n        // this.nodeLandCollider = Tools.getOrAddComponent(this.landNode, 'NodeCollider');\n        // this.nodeLandCollider.init(this.node, true);\n\n        // var nodePickCollider = Tools.getOrAddComponent(this.pickNode, 'NodeCollider');\n        //TODO nodeCollider 需要设置初始队伍 changeColliderTag\n        // nodePickCollider.init(this.node, false);\n\n        this.node.on('changeTag', this.changeColliderTag, this);\n        this.node.on('changeKnifeAttackGroup', this.changeKnifeAttackGroup, this);\n        this.node.on('changeColliderState', this.changeColliderState, this);\n        this.addComponent();\n\n        this.knifeColliderListener = Tools.getOrAddComponent(this.node, 'KnifeColliderListener');\n\n        this.knifeMoveCtrl = Tools.getOrAddComponent(this.node, 'KnifeMoveCtrl');\n        this.knifeParentCtrl = Tools.getOrAddComponent(this.node, 'KnifeParentCtrl');\n        this.knifeParentCtrl.init(this.itemNode);\n        this.knifeColliderNodeCtrl = Tools.getOrAddComponent(this.node, 'KnifeColliderNodeCtrl');\n        this.knifeColliderNodeCtrl.init(this.attackNode);//, this.pickNode, this.landNode, this.attackHeroNode);\n\n\n        this.knifeSkinCtrl = Tools.getOrAddComponent(this.skinNode, 'KnifeSkinCtrl');\n        this.activeNode = this.skinNode;\n\n        this.defenceRect = Tools.getOrAddComponent(this.node, 'DefenceRect');\n        this.defenceRect.init(this.node.width * 2, this.node.height * 2, true);\n\n        this.changeColliderTag(tid);\n    },\n\n    initWalls: function (type, width, height) {\n        switch (type) {\n            case 0:\n                this.knifeFix = Tools.getOrAddComponent(this.node, 'KnifeFixByWallCtrl');\n                break;\n            case 1:\n                this.knifeFix = Tools.getOrAddComponent(this.node, 'KnifeFixByCircleWallCtrl');\n                this.knifeFix.init();\n                break;\n        }\n        this.knifeFix.refresh(width, height);\n\n        this.knifeOutOfWall = Tools.getOrAddComponent(this.node, 'KnifeOutOfWallComponent');\n        this.knifeOutOfWall.init(this, width, height);\n    },\n\n    refreshWalls: function (width, height) {\n        this.knifeFix.refresh(width, height);\n        this.knifeOutOfWall.refresh(this, width, height);\n    },\n\n    addComponent: function () {\n        Tools.getOrAddComponent(this.node, 'KnifeCountComponent');\n        this.knifeStateComp = Tools.getOrAddComponent(this.node, 'KnifeStateComponent');\n        this.knifeMomentStateComp = Tools.getOrAddComponent(this.node, 'KnifeMomentStateComponent');\n        Tools.getOrAddComponent(this.node, 'KnifeOwnerComponent');\n        // Tools.getOrAddComponent(this.node, 'KnifeBuffComponent');\n    },\n\n    isOnLand: function () {\n        return this.teamID === 0 && this.knifeStateComp && this.knifeStateComp.state === KnifeState.Normal\n    },\n\n\n    changeColliderTag: function (tag) {\n        this.teamID = tag;\n\n        var collider = this.attackNode.getComponent(cc.Collider);\n        collider.tag = tag;\n        // var colliders = this.node.getComponentsInChildren(cc.Collider);\n        // for (var collider of colliders) {\n        // }\n    },\n\n    changeID: function (id) {\n        this.idLabel.string = id;\n\n        var collider = this.attackNode.getComponent(cc.Collider);\n        collider.customID = id;\n        // var colliders = this.node.getComponentsInChildren(cc.Collider);\n        // for (var collider of colliders) {\n        //     collider.customID = id;\n        // }\n    },\n\n    //变更攻击部分的组\n    changeKnifeAttackGroup: function (group) {\n        this.nodeCollider.changeNodeGroup(group);\n    },\n\n    //当刀是否在视野范围内\n    onKnifeViewChange: function (isInMyView) {\n        // var group = this.nodeCollider.node.group;\n        // if (isInMyView) {\n        //     if (group === 'hideKnife') {\n        //         this.changeKnifeAttackGroup('otherKnife');\n        //     }\n        // } else {\n        //     if (group === 'otherKnife') {\n        //         this.changeKnifeAttackGroup('hideKnife');\n        //     }\n        // }\n    },\n    // update (dt) {},\n\n    /** @override */\n    updateGameLogic: function (dt) {\n        this.knifeParentCtrl.updateLogic(dt);\n        this.knifeMoveCtrl.updateLogic(dt);\n        this.knifeColliderNodeCtrl.updateLogic(dt);\n        this.knifeSkinCtrl.updateLogic(dt);\n\n        if (this.knifeFix) this.knifeFix.updateLogic(dt);\n\n        if (this.knifeOutOfWall) {\n            this.knifeOutOfWall.updateGameLogic(dt);\n            if (this.knifeOutOfWall.isOut) {\n                this.shouldRemove = true;\n                this.recycleSelf();\n            }\n        }\n        this.node.emit('resetDirty');\n\n        // if (this.nextClear) {\n        //     this.ctx.clear();\n        //     this.nextClear = false;\n        // }\n\n        // if (this.drawPos) {\n        //     this.nextClear = true;\n        //     this.ctx.circle(0, 0, 10)\n        //     this.ctx.fill();\n        //     this.ctx.moveTo(0, 0);\n        //     this.ctx.lineTo(this.drawPos.x - this.node.x, this.drawPos.y - this.node.y);\n        //     this.ctx.stroke();\n        //     this.drawPos = null;\n        // }\n\n        if (this.drawPos) {\n            if (!this.ropeNode.active) this.ropeNode.active = true;\n            var dir = this.drawPos.sub(this.node.position)\n            this.ropeNode.width = dir.mag();\n            var rotation = dir.angle(cc.v2(-1, 0)) * (180 / Math.PI);\n            if (dir.y < 0) {\n                rotation = -rotation;\n            }\n            this.ropeNode.rotation = rotation - this.ropeNode.parent.rotation;\n            this.drawPos = null;\n        } else {\n            if (this.ropeNode.active) this.ropeNode.active = false;\n        }\n\n        // this.teamIdLabel.string = this.teamID;\n        // this.teamIdLabel.node.rotation = -this.node.rotation;\n    },\n\n    draw(pos) {\n        this.drawPos = pos;\n    },\n    // /** overwrite */\n    // recycleSelf: function () {\n    //     this._super();\n    //     // if(this.isLog) {\n    //         console.log(\"recycle: this.node._pool.count: \" + this.node._pool._pool.length);\n    //     // }\n    // },\n\n    reLand: function () {\n        this.node.emit('changeTag', 0);\n        this.node.emit('updateState', KnifeState.Normal);\n        this.node.emit('updateMomentState', KnifeMomentState.ReleaseFinish);\n\n        // this.node.active = false;\n    },\n\n    setSage: function (value) {\n        // this.isSage = value;\n        // this.node.opacity = value ? 128 : 255;\n        // var group = value ? 'default' : this.teamID === GameData.instance.localHeroTid ? 'knife' : 'otherKnife';\n        // this.changeKnifeAttackGroup(group);\n    },\n\n    changeColliderState(state) {\n        this.nodeCollider.node.active = state;\n    },\n});"]}