{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\common/assets\\scripts\\common\\UtilPhysics.js"],"names":["GameData","require","Tools","UtilPhysics","cc","Class","statics","checkPointLine","x","y","p1","p2","r","isCollidingLineRect","contains","left","right","wd2","width","hd2","height","i","w","h","isCollidingRectRect","r1","r2","Math","abs","isCollidingRectPoint","rect","point","xMin","xMax","yMin","yMax","checkMovePointCollideRectReturnHitPos","pointPos","dir","isKeepOutOfRect","startPos","endPos","add","isContainsStart","isContainsEnd","l","u","d","lu","v2","ru","ld","rd","retP","Vec2","ZERO","isHit","pSegmentIntersect","pLineIntersect","mul","checkMoveRectCollideRectReturnHitPos","moveRect","center","checkMovePointCollideRectReturnSlidePos","clampf","vertexDirScaleAbs","checkMoveRectCollideRectReturnSlidePos","pos","ret","test"],"mappings":"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","file":"UtilPhysics.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\common","sourcesContent":["var GameData = require(\"GameData\");\nconst Tools = require('Tools');\n\nvar UtilPhysics = cc.Class({\n    statics: {\n        /**\n         * 判断点和两点表示的线关系\n         * @param p1 线段点1\n         * @param p2 线段点2\n         * @return 0点在线上，大于0点在线左侧，小于0点在线右侧\n         */\n        checkPointLine: function (x, y, p1, p2) {\n            var r = ((x - p1.x) * (p2.y - p1.y) - (y - p1.y) * (p2.x - p1.x))\n            if (r === 0) {\n                return 0;\n            } else if (r > 0) {\n                return 1;\n            } else {\n                return -1;\n            }\n        },\n\n        /**\n         * 判断两点表示的线段是否和矩形碰撞\n         * @param p1 线段点1\n         * @param p2 线段点2\n         * @param r 矩形\n         */\n        isCollidingLineRect: function (p1, p2, r) {\n            // 判断2点是否和矩形碰撞\n            if (r.contains(p1) || r.contains(p2)) {\n                return true\n            }\n\n            // 判断矩形的4个顶点是否都在线段的同侧，如果是则无碰撞，反之有碰撞\n            var left = 0;\n            var right = 0;\n            var wd2 = r.width / 2;\n            var hd2 = r.height / 2;\n            for (var i = 0; i < 4; i++) {\n                var w = 0\n                var h = 0\n                switch (i) {\n                    case 0: {\n                        w = -wd2;\n                        h = hd2;\n                        break;\n                    }\n                    case 1: {\n                        w = -wd2;\n                        h = -hd2;\n                        break;\n                    }\n                    case 2: {\n                        w = wd2;\n                        h = -hd2;\n                        break;\n                    }\n                    case 3: {\n                        w = wd2;\n                        h = hd2;\n                        break;\n                    }\n                }\n                var x = r.x + w;\n                var y = r.y + h;\n                switch (UtilPhysics.checkPointLine(x, y, p1, p2)) {\n                    case 0:\n                        return true\n                    case 1:\n                        if (right > 0) {\n                            return true;\n                        } else {\n                            left++\n                        }\n                        break;\n                    case -1:\n                        if (left > 0) {\n                            return true;\n                        } else {\n                            right++\n                        }\n                        break;\n                }\n            }\n            return false\n        },\n\n        isCollidingRectRect: function(r1, r2){\n            return Math.abs(r2.x - r1.x) * 2 <= r1.width + r2.width \n            && Math.abs(r2.y - r1.y) * 2 <= r1.height + r2.height;\n        },\n\n        isCollidingRectPoint: function(rect, point) {\n            if (point.x >= rect.xMin && point.x <= rect.xMax && point.y >= rect.yMin && point.y <= rect.yMax) {\n                if (point.x === rect.xMin || point.x === rect.xMax || point.y === rect.yMin || point.y === rect.yMax) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            } else {\n                return -1;\n            }\n        },\n\n        // 检查移动点和矩形的碰撞,返回[是否碰撞,碰撞的点]\n        checkMovePointCollideRectReturnHitPos: function(pointPos, dir, rect, isKeepOutOfRect) {\n            var startPos = pointPos;\n            var endPos = pointPos.add(dir);\n            var isContainsStart = UtilPhysics.isCollidingRectPoint(rect, startPos);\n            var isContainsEnd = UtilPhysics.isCollidingRectPoint(rect, endPos);\n            if ((isKeepOutOfRect && isContainsEnd >= 0) || (!isKeepOutOfRect && isContainsEnd <= 0)) {\n                // cc.log(\"rect:\" + rect + \" origin:\" + rect.origin + \" size:\" + rect.size);\n                // cc.log(\"start:\" + startPos + \" end:\" + endPos);\n                // cc.log(\"isContains:\" + isContainsStart + \"|\" + isContainsEnd + \" isKeepOutOfRect:\" + isKeepOutOfRect);\n                var l = rect.x;\n                var r = rect.x + rect.width;\n                var u = rect.y + rect.height;\n                var d = rect.y;\n                var lu = cc.v2(l, u);\n                var ru = cc.v2(r, u);\n                var ld = cc.v2(l, d);\n                var rd = cc.v2(r, d);\n                var retP = cc.Vec2.ZERO;\n                var isHit = false;\n                // 上\n                if (startPos.y > d && ((startPos.y >= u && dir.y < 0) || (startPos.y <= u && dir.y > 0))) {\n                    isHit = Tools.pSegmentIntersect(startPos, endPos, lu, ru);\n                    if (isHit) {\n                        Tools.pLineIntersect(startPos, endPos, lu, ru, retP);\n                    }\n                }\n                // 下\n                if (!isHit && startPos.y < u && ((startPos.y <= d && dir.y > 0) || (startPos.y >= d && dir.y < 0))) {\n                    isHit = Tools.pSegmentIntersect(startPos, endPos, ld, rd);\n                    if (isHit) {\n                        Tools.pLineIntersect(startPos, endPos, ld, rd, retP);\n                    }\n                }\n                // 左\n                if (!isHit && startPos.x < r && ((startPos.x <= l && dir.x > 0) || (startPos.x >= l && dir.x < 0))) {\n                    isHit = Tools.pSegmentIntersect(startPos, endPos, lu, ld);\n                    if (isHit) {\n                        Tools.pLineIntersect(startPos, endPos, lu, ld, retP);\n                    }\n                }\n                // 右\n                if (!isHit && startPos.x > l && ((startPos.x >= r && dir.x < 0) || (startPos.x <= r && dir.x > 0))) {\n                    isHit = Tools.pSegmentIntersect(startPos, endPos, ru, rd);\n                    if (isHit) {\n                        Tools.pLineIntersect(startPos, endPos, ru, rd, retP);\n                    }\n                }\n                if (isHit) {\n                    retP = startPos.add(dir.mul(retP.x));\n                    // cc.log(\"hit:\" + retP);\n                    return [true, retP];\n                }\n            }\n            return [false, null];\n        },\n\n        // 检查移动矩形和矩形的碰撞,返回[是否碰撞,移动矩形发生碰撞时的位置]\n        checkMoveRectCollideRectReturnHitPos: function(moveRect, dir, rect, isKeepOutOfRect) {\n            rect = cc.rect(rect.x - moveRect.width/2, rect.y - moveRect.height/2, rect.width + moveRect.width, rect.height + moveRect.height);\n            return UtilPhysics.checkMovePointCollideRectReturnHitPos(moveRect.center, dir, rect, isKeepOutOfRect);\n        },\n        \n        // 检查移动点和矩形的碰撞,返回[是否碰撞,沿着矩形边缘滑动后的点]\n        checkMovePointCollideRectReturnSlidePos: function(pointPos, dir, rect, isKeepOutOfRect) {\n            var startPos = pointPos;\n            var endPos = pointPos.add(dir);\n            var isContainsEnd = UtilPhysics.isCollidingRectPoint(rect, endPos);\n            if (!isKeepOutOfRect) {\n                if (isContainsEnd < 0) {\n                    endPos.x = cc.clampf(endPos.x, rect.xMin, rect.xMax);\n                    endPos.y = cc.clampf(endPos.y, rect.yMin, rect.yMax);\n                    return [true, endPos];\n                }\n            } else {\n                if (isContainsEnd >= 0) {\n                    var l = rect.x;\n                    var r = rect.x + rect.width;\n                    var u = rect.y + rect.height;\n                    var d = rect.y;\n                    var center = rect.center;\n                    var isHit = false;\n                    \n                    // cc.log(\"rect:\" + rect + \" origin:\" + rect.origin + \" size:\" + rect.size);\n                    // cc.log(\"start:\" + startPos + \" end:\" + endPos);\n                    // cc.log(\"Math.abs(dir.x / dir.y):\" + Math.abs(dir.x / dir.y) + \" | \" + UtilPhysics.vertexDirScaleAbs(l, u, startPos))\n\n                    // 判断prevPos时所处的和wall的位置区域，根据不同区域判断出来要碰撞wall的哪面边，从而来修正位置\n                    // 左\n                    if (startPos.x <= l && startPos.y < u && startPos.y > d) {\n                        isHit = true;\n                        endPos.x = l;\n                    }\n                    // 右\n                    if (startPos.x >= r && startPos.y < u && startPos.y > d) {\n                        isHit = true;\n                        endPos.x = r;\n                    }\n                    // 上\n                    if (startPos.y >= u && startPos.x < r && startPos.x > l) {\n                        isHit = true;\n                        endPos.y = u;\n                    }\n                    // 下\n                    if (startPos.y <= d && startPos.x < r && startPos.x > l) {\n                        isHit = true;\n                        endPos.y = d;\n                    }\n                    // 左上\n                    if (startPos.x <= l && startPos.y >= u) {\n                        isHit = true;\n                        if (dir.y !== 0 && startPos.y !== u && Math.abs(dir.x / dir.y) >= UtilPhysics.vertexDirScaleAbs(l, u, startPos)) {\n                            // 上\n                            endPos.y = u;\n                        } else {\n                            // 左\n                            endPos.x = l;\n                        }\n                    }\n                    // 右上\n                    if (startPos.x >= r && startPos.y >= u) {\n                        isHit = true;\n                        if (dir.y !== 0 && startPos.y !== u && Math.abs(dir.x / dir.y) >= UtilPhysics.vertexDirScaleAbs(r, u, startPos)) {\n                            // 上\n                            endPos.y = u;\n                        } else {\n                            // 右\n                            endPos.x = r;\n                        }\n                    }\n                    // 左下\n                    if (startPos.x <= l && startPos.y <= d) {\n                        isHit = true;\n                        if (dir.y !== 0 && startPos.y !== d && Math.abs(dir.x / dir.y) >= UtilPhysics.vertexDirScaleAbs(l, d, startPos)) {\n                            // 下\n                            endPos.y = d;\n                        } else {\n                            // 左\n                            endPos.x = l;\n                        }\n                    }\n                    // 右下\n                    if (startPos.x >= r && startPos.y <= d) {\n                        isHit = true;\n                        if (dir.y !== 0 && startPos.y !== d && Math.abs(dir.x / dir.y) >= UtilPhysics.vertexDirScaleAbs(r, d, startPos)) {\n                            // 下\n                            endPos.y = d;\n                        } else {\n                            // 右\n                            endPos.x = r;\n                        }\n                    }\n                    if (isHit) {\n                        // cc.log(\"hit:\" + endPos);\n                        return [true, endPos];\n                    }\n                }\n            }\n            return [false, null];\n        },\n        \n        // 检查移动矩形和矩形的碰撞,返回[是否碰撞,移动矩形沿着固定矩形滑动后的位置]\n        checkMoveRectCollideRectReturnSlidePos: function(moveRect, dir, rect, isKeepOutOfRect) {\n            rect = cc.rect(rect.x - moveRect.width/2, rect.y - moveRect.height/2, rect.width + moveRect.width, rect.height + moveRect.height);\n            return UtilPhysics.checkMovePointCollideRectReturnSlidePos(moveRect.center, dir, rect, isKeepOutOfRect);\n        },\n        \n        vertexDirScaleAbs: function (x, y, pos) {\n            var ret = Math.abs((x - pos.x) / (y - pos.y));\n            return ret;\n        },\n\n        test: function() {\n            var rect = cc.rect(-320, -320, 640, 640);\n            var pointPos = cc.v2(310, 310);\n            var dir = cc.v2(0, 20);\n\n            var moveRect = cc.rect(310, 310, 20, 20);\n            dir = cc.v2(10, 10);\n            UtilPhysics.checkMoveRectCollideRectReturnSlidePos(moveRect, dir, rect, false);\n\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n            // dir = cc.v2(20, 0);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n\n            // pointPos = cc.v2(-310, -310);\n            // dir = cc.v2(0, -20);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n            // dir = cc.v2(-20, 0);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n\n            // pointPos = cc.v2(0, 330);\n            // dir = cc.v2(0, -1000);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n            \n            // pointPos = cc.v2(0, -330);\n            // dir = cc.v2(0, 1000);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n\n            // pointPos = cc.v2(-330, 0);\n            // dir = cc.v2(1000, 0);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n            \n            // pointPos = cc.v2(0, -330);\n            // dir = cc.v2(0, -1000);\n            // UtilPhysics.checkMovePointCollideRectReturnHitPos(pointPos, dir, rect);\n\n            // var moveRect = cc.rect(-5, -5, 10, 10);\n            // var dir = cc.v2(6, 6);\n            // var rect = cc.rect(10, 10, 20, 20);\n            // UtilPhysics.checkMoveRectCollideRectReturnSlidePos(moveRect, dir, rect);\n\n            // dir = cc.v2(6, 0);\n            // UtilPhysics.checkMoveRectCollideRectReturnSlidePos(moveRect, dir, rect);\n        }\n    }\n})"]}