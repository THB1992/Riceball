{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\common/assets\\scripts\\common\\CollisionManager.js"],"names":["Contact","require","CollisionType","NodeEvent","cc","Node","EventType","math","vmath","_vec2","v2","obbApplyMatrix","rect","mat4","out_bl","out_tl","out_tr","out_br","x","y","width","height","mat4m","m","m00","m01","m04","m05","m12","m13","tx","ty","xa","xb","yc","yd","CollisionManager","Class","mixins","EventTarget","properties","enabled","enabledDrawBoundingBox","ctor","_contacts","_colliders","_debugDrawer","_enabledDebugDraw","director","_scheduler","enableForTarget","update","dt","i","l","colliders","length","updateCollider","contacts","results","collisionType","updateState","None","push","result","_doCollide","drawColliders","contact","contactFunc","CollisionEnter","CollisionStay","CollisionExit","collider1","collider2","comps1","node","_components","comps2","comp","shouldCollide","c1","c2","node1","node2","collisionMatrix","game","groupIndex","initCollider","collider","world","aabb","preAabb","matrix","create","radius","BoxCollider","position","points","PolygonCollider","map","p","CircleCollider","offset","getWorldMatrix","size","wps","wp0","wp1","wp2","wp3","minx","Math","min","miny","maxx","max","maxy","vec2","transformMat4","mm","tempx","tempy","d","sqrt","worldPoints","addCollider","index","indexOf","other","on","GROUP_CHANGED","onNodeGroupChanged","removeCollider","splice","touching","off","lastGroupIndex","getComponents","Collider","PhysicsCollider","_checkDebugDrawValid","debugDrawer","clear","strokeColor","Color","WHITE","ps","moveTo","j","lineTo","close","stroke","circle","BLUE","xMin","yMin","yMax","xMax","isValid","zIndex","macro","MAX_ZINDEX","addPersistRootNode","addComponent","Graphics","js","getset","prototype","value","active","module","exports"],"mappings":"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","file":"CollisionManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\common","sourcesContent":["/****************************************************************************\n Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.\n\n https://www.cocos.com/\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated engine source code (the \"Software\"), a limited,\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\n to use Cocos Creator solely to develop games on your target platforms. You shall\n not use Cocos Creator software for developing other software or tools that's\n used for developing games. You are not granted to publish, distribute,\n sublicense, and/or sell copies of Cocos Creator.\n\n The software or tools in this License Agreement are licensed, not sold.\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n ****************************************************************************/\n\nconst Contact = require('Contact');\nconst CollisionType = Contact.CollisionType;\nconst NodeEvent = cc.Node.EventType;\n\nconst math = cc.vmath;\n\nlet _vec2 = cc.v2();\n\nfunction obbApplyMatrix (rect, mat4, out_bl, out_tl, out_tr, out_br) {\n    let x = rect.x;\n    let y = rect.y;\n    let width = rect.width;\n    let height = rect.height;\n\n    let mat4m = mat4.m;\n    let m00 = mat4m[0], m01 = mat4m[1], m04 = mat4m[4], m05 = mat4m[5];\n    let m12 = mat4m[12], m13 = mat4m[13];\n\n    let tx = m00 * x + m04 * y + m12;\n    let ty = m01 * x + m05 * y + m13;\n    let xa = m00 * width;\n    let xb = m01 * width;\n    let yc = m04 * height;\n    let yd = m05 * height;\n\n    out_tl.x = tx;\n    out_tl.y = ty;\n    out_tr.x = xa + tx;\n    out_tr.y = xb + ty;\n    out_bl.x = yc + tx;\n    out_bl.y = yd + ty;\n    out_br.x = xa + yc + tx;\n    out_br.y = xb + yd + ty;\n}\n\n/**\n * !#en\n * A simple collision manager class. \n * It will calculate whether the collider collides other colliders, if collides then call the callbacks.\n * !#zh\n * 一个简单的碰撞组件管理类，用于处理节点之间的碰撞组件是否产生了碰撞，并调用相应回调函数。\n *\n * @class CollisionManager\n * @uses EventTarget\n * @example\n *\n * // Get the collision manager.\n * let manager = cc.director.getCollisionManager();\n *\n * // Enabled the colider manager.\n * manager.enabled = true;\n *\n * // Enabled draw collider\n * manager.enabledDebugDraw = true;\n *\n * // Enabled draw collider bounding box\n * manager.enabledDrawBoundingBox = true;\n *\n * \n * // Collision callback\n * onCollisionEnter: function (other, self) {\n *     this.node.color = cc.Color.RED;\n *     this.touchingNumber ++;\n *\n *     // let world = self.world;\n *     // let aabb = world.aabb;\n *     // let preAabb = world.preAabb;\n *     // let m = world.matrix;\n *\n *     // for circle collider\n *     // let r = world.radius;\n *     // let p = world.position;\n *\n *     // for box collider and polygon collider\n *     // let ps = world.points;\n * },\n *   \n * onCollisionStay: function (other, self) {\n *     console.log('on collision stay');\n * },\n *   \n * onCollisionExit: function (other, self) {\n *     this.touchingNumber --;\n *     if (this.touchingNumber === 0) {\n *         this.node.color = cc.Color.WHITE;\n *     }\n * }\n */\nlet CollisionManager = cc.Class({\n    mixins: [cc.EventTarget],\n\n    properties: {\n        /**\n         * !#en\n         * !#zh\n         * 是否开启碰撞管理，默认为不开启\n         * @property {Boolean} enabled\n         * @default false\n         */\n        enabled: false,\n        /**\n         * !#en\n         * !#zh\n         * 是否绘制碰撞组件的包围盒，默认为不绘制\n         * @property {Boolean} enabledDrawBoundingBox\n         * @default false\n         */\n        enabledDrawBoundingBox: false\n    },\n\n    ctor: function () {\n        this._contacts = [];\n        this._colliders = [];\n        this._debugDrawer = null;\n        this._enabledDebugDraw = false;\n        \n        cc.director._scheduler && cc.director._scheduler.enableForTarget(this);\n    },\n\n    update: function (dt) {\n        if (!this.enabled) {\n            return;\n        }\n\n        let i, l;\n\n        // update collider\n        let colliders = this._colliders;\n        for (i = 0, l = colliders.length; i < l; i++) {\n            this.updateCollider(colliders[i]);\n        }\n\n        // do collide\n        let contacts = this._contacts;\n        let results = [];\n        \n        for (i = 0, l = contacts.length; i < l; i++) {\n            let collisionType = contacts[i].updateState();\n            if (collisionType === CollisionType.None) {\n                continue;\n            }\n\n            results.push([collisionType, contacts[i]]);\n        }\n\n        // handle collide results, emit message\n        for (i = 0, l = results.length; i < l; i++) {\n            let result = results[i];\n            this._doCollide(result[0], result[1]);\n        }\n\n        // draw colliders\n        this.drawColliders();\n    },\n\n    _doCollide: function (collisionType, contact) {\n        let contactFunc;\n        switch (collisionType) {\n            case CollisionType.CollisionEnter:\n                contactFunc = 'onCollisionEnter';\n                break;\n            case CollisionType.CollisionStay:\n                contactFunc = 'onCollisionStay';\n                break;\n            case CollisionType.CollisionExit:\n                contactFunc = 'onCollisionExit';\n                break;\n        }\n\n        let collider1 = contact.collider1;\n        let collider2 = contact.collider2;\n\n        let comps1 = collider1.node._components;\n        let comps2 = collider2.node._components;\n\n        let i, l, comp;\n        for (i = 0, l = comps1.length; i < l; i++) {\n            comp = comps1[i];\n            if (comp[contactFunc]) {\n                comp[contactFunc](collider2, collider1);\n            }\n        }\n\n        for (i = 0, l = comps2.length; i < l; i++) {\n            comp = comps2[i];\n            if (comp[contactFunc]) {\n                comp[contactFunc](collider1, collider2);\n            }\n        }\n    }, \n\n    shouldCollide: function (c1, c2) {\n        let node1 = c1.node, node2 = c2.node;\n        let collisionMatrix = cc.game.collisionMatrix;\n        return node1 !== node2 && collisionMatrix[node1.groupIndex][node2.groupIndex];\n    },\n\n    initCollider: function (collider) {\n        if (!collider.world) {\n            let world = collider.world = {};\n            world.aabb = cc.rect();\n            world.preAabb = cc.rect();\n            world.matrix = math.mat4.create();\n\n            world.radius = 0;\n\n            if (collider instanceof cc.BoxCollider) {\n                world.position = null;\n                world.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()];\n            }\n            else if (collider instanceof cc.PolygonCollider) {\n                world.position = null;\n                world.points = collider.points.map(function (p) {\n                    return cc.v2(p.x, p.y);\n                });\n            }\n            else if (collider instanceof cc.CircleCollider) {\n                world.position = cc.v2();\n                world.points = null;\n            }\n        }\n    },\n\n    updateCollider: function (collider) {\n        let offset = collider.offset;\n        let world = collider.world;\n        let aabb = world.aabb;\n\n        let m = world.matrix;\n        collider.node.getWorldMatrix(m);\n\n        let preAabb = world.preAabb;\n        preAabb.x = aabb.x;\n        preAabb.y = aabb.y;\n        preAabb.width = aabb.width;\n        preAabb.height = aabb.height;\n\n        if (collider instanceof cc.BoxCollider) {\n            let size = collider.size;\n\n            aabb.x = offset.x - size.width/2;\n            aabb.y = offset.y - size.height/2;\n            aabb.width = size.width;\n            aabb.height = size.height;\n\n            let wps = world.points;\n            let wp0 = wps[0], wp1 = wps[1],\n                wp2 = wps[2], wp3 = wps[3];\n            obbApplyMatrix(aabb, m, wp0, wp1, wp2, wp3);\n\n            let minx = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);\n            let miny = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);\n            let maxx = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);\n            let maxy = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);\n\n            aabb.x = minx;\n            aabb.y = miny;\n            aabb.width = maxx - minx;\n            aabb.height = maxy - miny;\n        }\n        else if (collider instanceof cc.CircleCollider) {\n            // calculate world position\n            math.vec2.transformMat4(_vec2, collider.offset, m);\n\n            world.position.x = _vec2.x;\n            world.position.y = _vec2.y;\n\n            // calculate world radius\n            let mm = m.m;\n            let tempx = mm[12], tempy = mm[13];\n            mm[12] = mm[13] = 0;\n\n            _vec2.x = collider.radius;\n            _vec2.y = 0;\n\n            math.vec2.transformMat4(_vec2, _vec2, m);\n            let d = Math.sqrt(_vec2.x * _vec2.x + _vec2.y * _vec2.y);\n\n            world.radius = d;\n\n            aabb.x = world.position.x - d;\n            aabb.y = world.position.y - d;\n            aabb.width = d * 2;\n            aabb.height = d * 2;\n\n            mm[12] = tempx;\n            mm[13] = tempy;\n        }\n        else if (collider instanceof cc.PolygonCollider) {\n            let points = collider.points;\n            let worldPoints = world.points;\n\n            worldPoints.length = points.length;\n\n            let minx = 1e6, miny = 1e6, maxx = -1e6, maxy = -1e6;\n            for (let i = 0, l = points.length; i < l; i++) {\n                if (!worldPoints[i]) {\n                    worldPoints[i] = cc.v2();\n                }\n\n                _vec2.x = points[i].x + offset.x;\n                _vec2.y = points[i].y + offset.y;\n                \n                math.vec2.transformMat4(_vec2, _vec2, m);\n                \n                let x = _vec2.x;\n                let y = _vec2.y;\n\n                worldPoints[i].x = x;\n                worldPoints[i].y = y;\n\n                if (x > maxx) maxx = x;\n                if (x < minx) minx = x;\n                if (y > maxy) maxy = y;\n                if (y < miny) miny = y;\n            }\n\n            aabb.x = minx;\n            aabb.y = miny;\n            aabb.width = maxx - minx;\n            aabb.height = maxy - miny;\n        }\n    },\n\n    addCollider: function (collider) {\n        let colliders = this._colliders;\n        let index = colliders.indexOf(collider);\n        if (index === -1) {\n            for (let i = 0, l = colliders.length; i < l; i++) {\n                let other = colliders[i];\n                if (this.shouldCollide(collider, other)) {\n                    let contact = new Contact(collider, other);\n                    this._contacts.push(contact);\n                }\n            }\n\n            colliders.push(collider);\n            this.initCollider(collider);\n        }\n\n        collider.node.on(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);\n    },\n\n    removeCollider: function (collider) {\n        let colliders = this._colliders;\n        let index = colliders.indexOf(collider);\n        if (index >= 0) {\n            colliders.splice(index, 1);\n\n            let contacts = this._contacts;\n            for (let i = contacts.length - 1; i >= 0; i--) {\n                let contact = contacts[i];\n                if (contact.collider1 === collider || contact.collider2 === collider) {\n                    if (contact.touching) {\n                        this._doCollide(CollisionType.CollisionExit, contact);\n                    }\n\n                    contacts.splice(i, 1);\n                }\n            }\n\n            collider.node.off(NodeEvent.GROUP_CHANGED, this.onNodeGroupChanged, this);\n        }\n        else {\n            // cc.errorID(6600);\n        }\n    },\n\n    onNodeGroupChanged: function (node) {\n        if (node.lastGroupIndex === node.groupIndex) return;\n        node.lastGroupIndex = node.groupIndex;\n\n        let colliders = node.getComponents(cc.Collider);\n\n        for (let i = 0, l = colliders.length; i < l; i++) {\n            let collider = colliders[i];\n            if(cc.PhysicsCollider && collider instanceof cc.PhysicsCollider) {\n                continue;\n            }\n            this.removeCollider(collider);\n            this.addCollider(collider);\n        }\n    },\n\n    drawColliders: function () {\n        if (!this._enabledDebugDraw) {\n            return;\n        }\n\n        this._checkDebugDrawValid();\n\n        let debugDrawer = this._debugDrawer;\n        debugDrawer.clear();\n\n        let colliders = this._colliders;\n\n        for (let i = 0, l = colliders.length; i < l; i++) {\n            let collider = colliders[i];\n\n            debugDrawer.strokeColor = cc.Color.WHITE;\n            if (collider instanceof cc.BoxCollider || collider instanceof cc.PolygonCollider) {\n                let ps = collider.world.points;\n                if (ps.length > 0) {\n                    debugDrawer.moveTo(ps[0].x, ps[0].y);\n                    for (let j = 1; j < ps.length; j++) {\n                        debugDrawer.lineTo(ps[j].x, ps[j].y);\n                    }\n                    debugDrawer.close();\n                    debugDrawer.stroke();\n                }\n            }\n            else if (collider instanceof cc.CircleCollider) {\n                debugDrawer.circle(collider.world.position.x, collider.world.position.y, collider.world.radius);\n                debugDrawer.stroke();\n            }\n\n            if (this.enabledDrawBoundingBox) {\n                let aabb = collider.world.aabb;\n                \n                debugDrawer.strokeColor = cc.Color.BLUE;\n                \n                debugDrawer.moveTo(aabb.xMin, aabb.yMin);\n                debugDrawer.lineTo(aabb.xMin, aabb.yMax);\n                debugDrawer.lineTo(aabb.xMax, aabb.yMax);\n                debugDrawer.lineTo(aabb.xMax, aabb.yMin);\n\n                debugDrawer.close();\n                debugDrawer.stroke();\n            }\n        }\n    },\n\n    _checkDebugDrawValid () {\n        if (!this._debugDrawer || !this._debugDrawer.isValid) {\n            let node = new cc.Node('COLLISION_MANAGER_DEBUG_DRAW');\n            node.zIndex = cc.macro.MAX_ZINDEX;\n            cc.game.addPersistRootNode(node);\n            this._debugDrawer = node.addComponent(cc.Graphics);\n        }\n    }\n});\n\n/**\n * !#en\n * !#zh\n * 是否绘制碰撞组件的形状，默认为不绘制\n * @property {Boolean} enabledDebugDraw\n * @default false\n */\ncc.js.getset(CollisionManager.prototype, 'enabledDebugDraw', \n    function () {\n        return this._enabledDebugDraw;\n    },\n    function (value) {\n        if (value && !this._enabledDebugDraw) {\n            this._checkDebugDrawValid();\n            this._debugDrawer.node.active = true;\n        }\n        else if (!value && this._enabledDebugDraw) {\n            this._debugDrawer.clear(true);\n            this._debugDrawer.node.active = false;\n        }\n\n        this._enabledDebugDraw = value;\n    }\n);\n\n\nmodule.exports = CollisionManager;\n"]}