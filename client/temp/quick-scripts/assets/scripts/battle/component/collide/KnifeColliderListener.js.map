{"version":3,"sources":["KnifeColliderListener.js"],"names":["KnifeState","require","GameData","KnifeMomentState","cc","Class","extends","Component","properties","onLoad","node","on","onPickUpKnife","throwKnife","otherCollider","emit","tag","Capture","instance","localHeroTid","isDanceRelease","Release"],"mappings":";;;;;;AAAA,IAAMA,aAAaC,QAAQ,OAAR,EAAiBD,UAApC;AACA,IAAME,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,mBAAmBF,QAAQ,OAAR,EAAiBE,gBAA1C;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ,KAHP;;AAqBL;;AAEAC,YAAQ,kBAAY;AAChB,aAAKC,IAAL,CAAUC,EAAV,CAAa,eAAb,EAA8B,KAAKC,aAAnC,EAAkD,IAAlD;AACA,aAAKF,IAAL,CAAUC,EAAV,CAAa,YAAb,EAA2B,KAAKE,UAAhC,EAA4C,IAA5C;AACH,KA1BI;;AA4BL;AACAD,mBAAe,uBAAUE,aAAV,EAAyB;AACpC,aAAKJ,IAAL,CAAUK,IAAV,CAAe,WAAf,EAA4BD,cAAcE,GAA1C;AACA,aAAKN,IAAL,CAAUK,IAAV,CAAe,mBAAf,EAAoCZ,iBAAiBc,OAArD;AACA,aAAKP,IAAL,CAAUK,IAAV,CAAe,cAAf;AACA;AACA,YAAID,cAAcE,GAAd,KAAsBd,SAASgB,QAAT,CAAkBC,YAA5C,EAA0D;AACtD;AACH,SAFD,MAEO;AACH;AACH;;AAEDL,sBAAcJ,IAAd,CAAmBK,IAAnB,CAAwB,WAAxB,EAAqC,CAAC,UAAD,EAAa,KAAKL,IAAlB,CAArC;AACH,KAzCI;;AA2CLG,gBAAY,sBAAkC;AAAA,YAAxBO,cAAwB,uEAAP,KAAO;;AAC1C,aAAKV,IAAL,CAAUK,IAAV,CAAe,WAAf,EAA4B,CAA5B;AACA,aAAKL,IAAL,CAAUK,IAAV,CAAe,kBAAf;AACA,aAAKL,IAAL,CAAUK,IAAV,CAAe,gBAAf,EAAiCK,cAAjC;AACA,aAAKV,IAAL,CAAUK,IAAV,CAAe,mBAAf,EAAoCZ,iBAAiBkB,OAArD;AACA,aAAKX,IAAL,CAAUK,IAAV,CAAe,cAAf;AACH;AACD;AAlDK,CAAT","file":"KnifeColliderListener.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\collide","sourcesContent":["const KnifeState = require('Types').KnifeState;\r\nconst GameData = require('GameData');\r\nconst KnifeMomentState = require('Types').KnifeMomentState;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad: function () {\r\n        this.node.on('onPickUpKnife', this.onPickUpKnife, this);\r\n        this.node.on('throwKnife', this.throwKnife, this);\r\n    },\r\n\r\n    // otherCollider可能是刀的碰撞组件也可能是人的，node节点不是主体,传事件得传递\r\n    onPickUpKnife: function (otherCollider) {\r\n        this.node.emit('changeTag', otherCollider.tag);\r\n        this.node.emit('updateMomentState', KnifeMomentState.Capture);\r\n        this.node.emit('stopResetPos');\r\n        // 判定tag是否等于是本地玩家\r\n        if (otherCollider.tag === GameData.instance.localHeroTid) {\r\n            // this.node.emit('changeKnifeAttackGroup', 'knife');\r\n        } else {\r\n            // this.node.emit('changeKnifeAttackGroup', 'otherKnife');\r\n        }\r\n\r\n        otherCollider.node.emit('emitEvent', ['addKnife', this.node])\r\n    },\r\n\r\n    throwKnife: function (isDanceRelease = false) {\r\n        this.node.emit('changeTag', 0);\r\n        this.node.emit('noticeOwnerLeave');\r\n        this.node.emit('isDanceRelease', isDanceRelease);\r\n        this.node.emit('updateMomentState', KnifeMomentState.Release);\r\n        this.node.emit('stopResetPos');\r\n    },\r\n    // update (dt) {},\r\n});"]}