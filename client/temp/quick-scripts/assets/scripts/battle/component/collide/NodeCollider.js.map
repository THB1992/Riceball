{"version":3,"sources":["NodeCollider.js"],"names":["CollisionEventManager","require","cc","Class","extends","Component","properties","onLoad","_collider","node","getComponent","Collider","on","changeColliderTag","changeNodeGroup","emitEvent","init","parent","checkCollision","needCheckStay","needCheckCollision","onCollisionEnter","other","self","getInstance","addCollisionEvent","onCollisionStay","addCollisionStayEvent","tag","error","group","detail","emit"],"mappings":";;;;;;AAAA;;;;AAIA,IAAMA,wBAAwBC,QAAQ,uBAAR,CAA9B;;AAEA;;;AAGAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY,EAHP;;AAKL;AACAC,YAAQ,kBAAY;AAChB;AACA,aAAKC,SAAL,GAAiB,KAAKC,IAAL,CAAUC,YAAV,CAAuBR,GAAGS,QAA1B,CAAjB;AACA,aAAKF,IAAL,CAAUG,EAAV,CAAa,mBAAb,EAAkC,KAAKC,iBAAvC,EAA0D,IAA1D;AACA,aAAKJ,IAAL,CAAUG,EAAV,CAAa,iBAAb,EAAgC,KAAKE,eAArC,EAAsD,IAAtD;;AAEA,aAAKL,IAAL,CAAUG,EAAV,CAAa,WAAb,EAA0B,KAAKG,SAA/B,EAA0C,IAA1C;AACH,KAbI;;AAeLC,UAAM,cAAUC,MAAV,EAAkBC,cAAlB,EAAkCC,aAAlC,EAAiD;AACnD,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKG,kBAAL,GAA0BF,cAA1B;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACH,KAnBI;;AAqBLE,sBAAkB,0BAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACrC,YAAI,KAAKH,kBAAT,EAA6B;AACzBpB,kCAAsBwB,WAAtB,GAAoCC,iBAApC,CAAsDH,KAAtD,EAA6DC,IAA7D;AACH;AAEJ,KA1BI;;AA4BLG,qBAAiB,yBAAUJ,KAAV,EAAiBC,IAAjB,EAAuB;AACpC,YAAI,KAAKH,kBAAL,IAA2B,KAAKD,aAApC,EAAmD;AAC/CnB,kCAAsBwB,WAAtB,GAAoCG,qBAApC,CAA0DL,KAA1D,EAAiEC,IAAjE;AACH;AAEJ,KAjCI;AAkCL;;;;AAIAV,uBAAmB,2BAAUe,GAAV,EAAe;AAC9B,YAAI,CAAC,KAAKpB,SAAV,EAAqB;AACjBN,eAAG2B,KAAH,CAAS,2BAAT;AACA;AACH;AACD,aAAKrB,SAAL,CAAeoB,GAAf,GAAqBA,GAArB;AACH,KA5CI;;AA8CL;;;;AAIAd,qBAAiB,yBAAUgB,KAAV,EAAiB;AAC9B,aAAKrB,IAAL,CAAUqB,KAAV,GAAkBA,KAAlB;AACH,KApDI;;AAsDL;AACAf,eAAW,mBAAUgB,MAAV,EAAkB;AACzB,YAAI,KAAKd,MAAT,EAAiB;AACb,iBAAKA,MAAL,CAAYe,IAAZ,CAAiBD,OAAO,CAAP,CAAjB,EAA4BA,OAAO,CAAP,CAA5B;AACH;AACJ;AA3DI,CAAT","file":"NodeCollider.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\collide","sourcesContent":["/**\n * @fileoverview 碰撞监听器\n * @author jinhaitao@gameley.cn (金海涛)\n */\nconst CollisionEventManager = require('CollisionEventManager');\n\n/**\n * 监听碰撞事件，并存至CollisionEventManager中,应该只挂在刀和玩家的碰撞体上\n */\ncc.Class({\n    extends: cc.Component,\n\n    properties: {},\n\n    // 初始化获取碰撞盒，用于碰撞时判定队伍\n    onLoad: function () {\n        //TODO 可能需要通过boxcollider去获取\n        this._collider = this.node.getComponent(cc.Collider);\n        this.node.on('changeColliderTag', this.changeColliderTag, this);\n        this.node.on('changeNodeGroup', this.changeNodeGroup, this);\n\n        this.node.on('emitEvent', this.emitEvent, this);\n    },\n\n    init: function (parent, checkCollision, needCheckStay) {\n        this.parent = parent;\n        this.needCheckCollision = checkCollision;\n        this.needCheckStay = needCheckStay;\n    },\n\n    onCollisionEnter: function (other, self) {\n        if (this.needCheckCollision) {\n            CollisionEventManager.getInstance().addCollisionEvent(other, self);\n        }\n\n    },\n\n    onCollisionStay: function (other, self) {\n        if (this.needCheckCollision && this.needCheckStay) {\n            CollisionEventManager.getInstance().addCollisionStayEvent(other, self);\n        }\n\n    },\n    /**\n     * @param  {number} tag tag编号，默认是0，只有在玩家身上的刀与玩家身上需要设置\n     *  用tag进行快速的队伍判定\n     */\n    changeColliderTag: function (tag) {\n        if (!this._collider) {\n            cc.error('no Collider To Change Tag');\n            return;\n        }\n        this._collider.tag = tag;\n    },\n\n    /**\n     * @param  {string} group 碰撞组名\n     * 切换node的碰撞组，主要用于刀的碰撞切换\n     */\n    changeNodeGroup: function (group) {\n        this.node.group = group\n    },\n\n    // 将本节点的触发的事件传给父节点\n    emitEvent: function (detail) {\n        if (this.parent) {\n            this.parent.emit(detail[0], detail[1]);\n        }\n    },\n});"]}