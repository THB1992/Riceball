{"version":3,"sources":["KnifeColliderNodeCtrl.js"],"names":["KnifeMomentState","require","KnifeColliderState","GameData","cc","Class","extends","Component","properties","init","attackNode","knifeStateComp","node","getComponent","attackCollider","BoxCollider","throwKnifeFinish","pickKnife","notColliderFlag","collState","Attack","throwKnifeStart","Throw","Land","updateLogic","dt","knifeMomentStateComp","isDirty","state","Capture","Init","Release","ReleaseFinish"],"mappings":";;;;;;AAAA,IAAMA,mBAAmBC,QAAQ,OAAR,EAAiBD,gBAA1C;AACA,IAAME,qBAAqBD,QAAQ,OAAR,EAAiBC,kBAA5C;AACA,IAAMC,WAAWF,QAAQ,UAAR,CAAjB;;AAEAG,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY,EAHP;;AAOL;;AAEA;;AAEAC,UAAM,cAAUC,UAAV,EAAsB;AAAC;AACzB,aAAKA,UAAL,GAAkBA,UAAlB;AACA;AACA;AACA,aAAKC,cAAL,GAAsB,KAAKC,IAAL,CAAUC,YAAV,CAAuB,qBAAvB,CAAtB;;AAEA,aAAKC,cAAL,GAAsBJ,WAAWG,YAAX,CAAwBT,GAAGW,WAA3B,CAAtB;AACA;AACA;AACA;;;AAGA,aAAKC,gBAAL;AACH,KAxBI;;AA2BL;AACAC,eAAW,qBAAY;AACnB;AACA;AACA;;AAEA,aAAKH,cAAL,CAAoBI,eAApB,GAAsC,KAAtC,CALmB,CAKyB;AAC5C;AACA;AACA;;AAEA,aAAKJ,cAAL,CAAoBK,SAApB,GAAgCjB,mBAAmBkB,MAAnD;AACH,KAvCI;;AA2CLC,qBAAiB,2BAAY;AACzB;AACA;AACA;;;AAGA,aAAKP,cAAL,CAAoBI,eAApB,GAAsC,IAAtC;AACA;AACA;AACA;AACA,aAAKJ,cAAL,CAAoBK,SAApB,GAAgCjB,mBAAmBoB,KAAnD;AAEH,KAvDI;;AAyDLN,sBAAkB,4BAAY;AAC1B;AACA;AACA;;;AAGA,aAAKF,cAAL,CAAoBI,eAApB,GAAsC;AACtC;AACA;AACA;;AAEA,aAAKJ,cAAL,CAAoBK,SAApB,GAAgCjB,mBAAmBqB,IALnD;AAMH,KArEI;;AAuELC,iBAAa,qBAAUC,EAAV,EAAc;AACvB,YAAI,CAAC,KAAKC,oBAAV,EAAgC,KAAKA,oBAAL,GAA4B,KAAKd,IAAL,CAAUC,YAAV,CAAuB,2BAAvB,CAA5B;;AAEhC;AACA,YAAI,KAAKa,oBAAL,CAA0BC,OAA9B,EAAuC;AACnC,oBAAQ,KAAKD,oBAAL,CAA0BE,KAAlC;AACI,qBAAK5B,iBAAiB6B,OAAtB;AACA,qBAAK7B,iBAAiB8B,IAAtB;AACI,yBAAKb,SAAL;AACA;AACJ,qBAAKjB,iBAAiB+B,OAAtB;AACI,yBAAKV,eAAL;AACA;AACJ,qBAAKrB,iBAAiBgC,aAAtB;AACI,yBAAKhB,gBAAL;AACA;AAVR;AAYH;AACJ;AACD;AA1FK,CAAT","file":"KnifeColliderNodeCtrl.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\knife\\ctrl","sourcesContent":["const KnifeMomentState = require('Types').KnifeMomentState;\r\nconst KnifeColliderState = require('Types').KnifeColliderState;\r\nconst GameData = require('GameData');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    init: function (attackNode) {//, pickNode, landNode, attackHeroNode) {\r\n        this.attackNode = attackNode;\r\n        // this.pickNode = pickNode;\r\n        // this.landNode = landNode;\r\n        this.knifeStateComp = this.node.getComponent('KnifeStateComponent');\r\n\r\n        this.attackCollider = attackNode.getComponent(cc.BoxCollider);\r\n        // this.attackHeroCollider = attackHeroNode.getComponent(cc.BoxCollider);\r\n        // this.pickCollider = pickNode.getComponent(cc.BoxCollider);\r\n        // this.landCollider = landNode.getComponent(cc.BoxCollider);\r\n\r\n\r\n        this.throwKnifeFinish();\r\n    },\r\n\r\n\r\n    // 被捡\r\n    pickKnife: function () {\r\n        // this.attackNode.active = true;\r\n        // this.pickNode.active = true;\r\n        // this.landNode.active = false;\r\n\r\n        this.attackCollider.notColliderFlag = false;// this.attackCollider.tag !== GameData.instance.localHeroTid;\r\n        // this.attackHeroCollider.notColliderFlag = this.attackHeroCollider.tag === GameData.instance.localHeroTid;\r\n        // this.pickCollider.notColliderFlag = false;\r\n        // this.landCollider.notColliderFlag = true;\r\n\r\n        this.attackCollider.collState = KnifeColliderState.Attack;\r\n    },\r\n\r\n\r\n\r\n    throwKnifeStart: function () {\r\n        // this.attackNode.active = false;\r\n        // this.pickNode.active = false;\r\n        // this.landNode.active = false;\r\n\r\n\r\n        this.attackCollider.notColliderFlag = true;\r\n        // this.attackHeroCollider.notColliderFlag = true;\r\n        // this.pickCollider.notColliderFlag = true;\r\n        // this.landCollider.notColliderFlag = true;\r\n        this.attackCollider.collState = KnifeColliderState.Throw;\r\n\r\n    },\r\n\r\n    throwKnifeFinish: function () {\r\n        // this.attackNode.active = false;\r\n        // this.pickNode.active = false;\r\n        // this.landNode.active = true;\r\n\r\n\r\n        this.attackCollider.notColliderFlag = //true;\r\n        // this.attackHeroCollider.notColliderFlag = true;\r\n        // this.pickCollider.notColliderFlag = true;\r\n        // this.landCollider.notColliderFlag = false;\r\n        \r\n        this.attackCollider.collState = KnifeColliderState.Land;\r\n    },\r\n\r\n    updateLogic: function (dt) {\r\n        if (!this.knifeMomentStateComp) this.knifeMomentStateComp = this.node.getComponent('KnifeMomentStateComponent');\r\n\r\n        //根据组件的状态做逻辑处理\r\n        if (this.knifeMomentStateComp.isDirty) {\r\n            switch (this.knifeMomentStateComp.state) {\r\n                case KnifeMomentState.Capture:\r\n                case KnifeMomentState.Init:\r\n                    this.pickKnife();\r\n                    break;\r\n                case KnifeMomentState.Release:\r\n                    this.throwKnifeStart();\r\n                    break;\r\n                case KnifeMomentState.ReleaseFinish:\r\n                    this.throwKnifeFinish();\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    // update (dt) {},\r\n});"]}