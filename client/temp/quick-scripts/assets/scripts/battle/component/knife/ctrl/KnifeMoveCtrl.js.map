{"version":3,"sources":["KnifeMoveCtrl.js"],"names":["Tools","require","KnifeState","KnifeMomentState","cc","Class","extends","Component","properties","changeTime","changeSpeed","initSpeed","adjustMoreSpeed","adjustLessSpeed","captureSpeed","releaseSpeed","nezhaSpeed","releaseRotation","rollRotation","lastRotation","danceRoll","acceleration","onLoad","knifeCountComp","node","getComponent","knifeMomentStateComp","on","dance","releasePosition","startChangeToAttack","startChangeToDefence","throwKnife","danceTime","danceIndex","danceRollAdd","angle","actions","i","time","action","sequence","rotateBy","push","finalAction","runAction","pos","getFinalPosition","count","maxCount","index","radius","getRadiusByKnifeCount","isDefence","sin","Math","PI","cos","y","x","raduis","v2","getRadiusChangePosition","self","finalPosition","emit","Attack","interval","getIntervalByCount","changeToDefence","changeToAttack","changeToAttackTime","updateChangeToAttack","dt","rotateKnife","changeToDefenceTime","updateChangeToDefence","state","Defence","newRotation","updateRotate","rotation","rollCallback","getThrowPosition","setNeZhaPosition","updateLogic","isDirty","Init","isInit","position","logicTargetInfo","Capture","isCapture","Release","isRelease","isAdjust","isMore","setScale","updateMoveLogic","newScale","scale","nodePosition","compareVec2","dir","sub","distance","mag","moveDistance","isNEZHA","add","mul","CaptureFinish","finalRotation","Normal","ReleaseFinish"],"mappings":"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","file":"KnifeMoveCtrl.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\knife\\ctrl","sourcesContent":["/**\r\n * @fileoverview 刀的移动控制\r\n * @author zhangzhuang@gameley.cn (张庄)\r\n */\r\nconst Tools = require('Tools');\r\nconst KnifeState = require('Types').KnifeState;\r\nconst KnifeMomentState = require('Types').KnifeMomentState;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //龟缩和攻击状态切换转动时间\r\n        changeTime: 0.05,\r\n        changeSpeed: 500,\r\n        initSpeed: 40,\r\n        //调整位置时移动速度\r\n        adjustMoreSpeed: 200,\r\n        //调整位置时移动速度\r\n        adjustLessSpeed: 400,\r\n        //被抓取时移动速度\r\n        captureSpeed: 600,\r\n        //被弹出时移动速度\r\n        releaseSpeed: 1500,\r\n        //nezha移动速度\r\n        nezhaSpeed: -3000,\r\n        //被弹出时转动速度\r\n        releaseRotation: 1000,\r\n        //在父节点下的角度\r\n        rollRotation: 0,\r\n\r\n        lastRotation: null,\r\n\r\n        danceRoll: 5,\r\n        acceleration: 0,\r\n    },\r\n\r\n    onLoad: function () {\r\n        this.knifeCountComp = this.node.getComponent('KnifeCountComponent');\r\n        this.knifeMomentStateComp = this.node.getComponent('KnifeMomentStateComponent');\r\n\r\n\r\n        this.node.on('dance', this.dance, this);\r\n        this.node.on('releasePosition', this.releasePosition, this);\r\n        this.node.on('startChangeToAttack', this.startChangeToAttack, this);\r\n        this.node.on('startChangeToDefence', this.startChangeToDefence, this);\r\n        this.node.on('throwKnife', this.throwKnife, this);\r\n    },\r\n\r\n    dance: function (danceTime) {\r\n        this.danceIndex = 0;\r\n        this.danceTime = danceTime;\r\n        this.danceRoll = 10;\r\n        this.danceRollAdd = 0.5\r\n        var angle = 40;\r\n        var actions = [];\r\n        for (let i = 5; i > 0; i--) {\r\n            var time = i / 15 * danceTime / 4;\r\n            angle -= 2;\r\n            var action = cc.sequence(cc.rotateBy(time, angle), cc.rotateBy(time, -angle), cc.rotateBy(time, -angle), cc.rotateBy(time, angle))\r\n            actions.push(action);\r\n        }\r\n        var finalAction = cc.sequence(...actions);\r\n        this.node.runAction(finalAction);\r\n    },\r\n\r\n    releasePosition: function (pos) {\r\n        this.releasePosition = pos;\r\n    },\r\n\r\n    getFinalPosition: function () {\r\n        this.acceleration = 0;\r\n        //根据数量算出当前离player的半径\r\n        var count = this.knifeCountComp.maxCount;\r\n        var index = this.knifeCountComp.index;\r\n        var radius = Tools.getRadiusByKnifeCount(count);\r\n        radius = this.isDefence ? radius - 90 : radius;\r\n        //根据位置算出应该改变的角度\r\n        this.rollRotation = 360 / count * index;\r\n        //根据半径和角度计算出移动到哪里\r\n        var sin = Math.sin(this.rollRotation * Math.PI / 180)\r\n        var cos = Math.cos(this.rollRotation * Math.PI / 180)\r\n        var y = sin * radius;\r\n        var x = cos * radius;\r\n        this.raduis = radius;\r\n        return cc.v2(x, y);\r\n    },\r\n\r\n\r\n    getRadiusChangePosition() {\r\n        //根据数量算出当前离player的半径\r\n        var count = this.knifeCountComp.maxCount;\r\n        var radius = Tools.getRadiusByKnifeCount(count);\r\n        radius = this.isDefence ? radius - 90 : radius;\r\n        //根据半径和角度计算出移动到哪里\r\n        var sin = Math.sin(this.rollRotation * Math.PI / 180)\r\n        var cos = Math.cos(this.rollRotation * Math.PI / 180)\r\n        var y = sin * radius;\r\n        var x = cos * radius;\r\n        this.raduis = radius;\r\n        return cc.v2(x, y);\r\n    },\r\n\r\n\r\n    startChangeToAttack: function () {\r\n        const self = this;\r\n        this.isDefence = false;\r\n        this.finalPosition = this.getFinalPosition();\r\n        self.node.emit('updateState', KnifeState.Attack);\r\n        var count = this.knifeCountComp.maxCount;\r\n        var index = this.knifeCountComp.index;\r\n        var interval = Tools.getIntervalByCount(count);\r\n\r\n        // const changeToAttack = function () {\r\n        //     // setTimeout(() => {\r\n        //     // if (self.isDefence = false) {\r\n        //     self.rotateKnife();\r\n        //     // }\r\n        // };\r\n\r\n        // setTimeout(changeToAttack, index * interval);\r\n        this.changeToDefence = false;\r\n        if (!this.changeToAttack) {\r\n            this.changeToAttack = true;\r\n            this.changeToAttackTime = index * interval / 1000;\r\n        }\r\n        // this.scheduleOnce(changeToAttack, index * interval);\r\n    },\r\n\r\n    updateChangeToAttack: function (dt) {\r\n        if (this.changeToAttack) {\r\n            this.changeToAttackTime -= dt;\r\n            if (this.changeToAttackTime <= 0) {\r\n                this.changeToAttack = false;\r\n                this.rotateKnife();\r\n            }\r\n        }\r\n    },\r\n\r\n    startChangeToDefence: function () {\r\n        const self = this;\r\n        this.isDefence = true;\r\n        this.finalPosition = this.getFinalPosition();\r\n\r\n        // const changeToDefence = function () {\r\n        //     // setTimeout(() => {\r\n        //     var state = self.isDefence ? KnifeState.Defence : KnifeState.Attack;\r\n        //     if (self.node) self.node.emit('updateState', state);\r\n        // };\r\n\r\n        // setTimeout(changeToDefence, this.changeTime * 1000);\r\n        // this.scheduleOnce(changeToDefence, this.changeTime * 1000);\r\n        this.rotateKnife();\r\n\r\n        this.changeToAttack = false;\r\n        if (!this.changeToDefence) {\r\n            this.changeToDefence = true;\r\n            this.changeToDefenceTime = this.changeTime;\r\n        }\r\n    },\r\n\r\n    updateChangeToDefence: function (dt) {\r\n        if (this.changeToDefence) {\r\n            this.changeToDefenceTime -= dt;\r\n            if (this.changeToDefenceTime <= 0) {\r\n                this.changeToDefence = false;\r\n                // this.rotateKnife();\r\n                var state = this.isDefence ? KnifeState.Defence : KnifeState.Attack;\r\n                if (this.node) this.node.emit('updateState', state);\r\n            }\r\n        }\r\n    },\r\n\r\n    throwKnife: function () {\r\n\r\n        this.changeToAttack = false;\r\n        this.changeToDefence = false;\r\n    },\r\n\r\n    rotateKnife: function () {\r\n        if (!this.node) return;\r\n        var newRotation = this.isDefence ? 360 - this.rollRotation : 450 - this.rollRotation;\r\n        if (this.lastRotation !== newRotation) {\r\n            this.lastRotation = newRotation;\r\n        }\r\n\r\n\r\n        // if (this.lastRotation === newRotation) {\r\n        //     if (!this.isRotating) {\r\n        //         if (this.node.rotation !== newRotation) {\r\n        //             this.node.rotation = newRotation;\r\n        //         }\r\n        //     }\r\n        //     return\r\n        // }\r\n        // this.isRotating = true;\r\n        // this.lastRotation = newRotation;\r\n        // var action = cc.rotateTo(this.changeTime, newRotation);\r\n        // var func = cc.callFunc(() => {\r\n        //     this.isRotating = false;\r\n        // })\r\n        // this.node.stopAllActions();\r\n        // this.node.runAction(cc.sequence(action, func));\r\n    },\r\n\r\n    updateRotate: function (dt) {\r\n        if (this.lastRotation === null) return;\r\n        if (this.node.rotation !== this.lastRotation) {\r\n            if (this.isDefence) {\r\n                this.node.rotation -= dt * 1080;\r\n                if (this.node.rotation <= this.lastRotation) {\r\n                    this.node.rotation = this.lastRotation;\r\n                    if (this.rollCallback) {\r\n                        this.rollCallback();\r\n                        this.rollCallback = null;\r\n                    }\r\n                }\r\n            } else {\r\n                this.node.rotation += dt * 1080;\r\n                if (this.node.rotation >= this.lastRotation) {\r\n                    this.node.rotation = this.lastRotation;\r\n                    if (this.rollCallback) {\r\n                        this.rollCallback();\r\n                        this.rollCallback = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    getThrowPosition: function () {\r\n        this.acceleration = 0;\r\n        return this.releasePosition;\r\n    },\r\n\r\n    setNeZhaPosition: function (pos) {\r\n        this.finalPosition = pos;\r\n        this.acceleration = 0;\r\n    },\r\n\r\n\r\n    updateLogic: function (dt) {\r\n        if (!this.knifeMomentStateComp) this.knifeMomentStateComp = this.node.getComponent('KnifeMomentStateComponent');\r\n        if (!this.knifeCountComp) this.knifeCountComp = this.node.getComponent('KnifeCountComponent');\r\n\r\n        //根据组件的状态做逻辑处理\r\n\r\n        if (this.knifeMomentStateComp.isDirty) {\r\n            switch (this.knifeMomentStateComp.state) {\r\n                case KnifeMomentState.Init:\r\n                    this.isInit = true;\r\n                    this.finalPosition = this.getFinalPosition();\r\n                    this.node.position = cc.v2(0, 0);\r\n                    this.logicTargetInfo();\r\n                    break;\r\n                case KnifeMomentState.Capture:\r\n                    this.isCapture = true;\r\n                    this.finalPosition = this.getFinalPosition();\r\n                    this.logicTargetInfo();\r\n                    break;\r\n                case KnifeMomentState.Release:\r\n                    this.isRelease = true;\r\n                    this.finalPosition = this.getThrowPosition();\r\n                    this.lastRotation = this.isDefence ? this.node.rotation - 360 : this.node.rotation + 360;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this.knifeCountComp.isDirty) {\r\n            this.isAdjust = true;\r\n            this.isMore = this.knifeCountComp.isMore;\r\n            if (!this.isCapture && !this.isMore) {\r\n                this.node.position = this.getRadiusChangePosition();\r\n            }\r\n\r\n            this.finalPosition = this.getFinalPosition();\r\n            this.rotateKnife();\r\n            this.logicTargetInfo();\r\n            this.setScale();\r\n        }\r\n\r\n        this.updateMoveLogic(dt);\r\n    },\r\n\r\n    logicTargetInfo: function () {\r\n        this.node.emit('logicTargetPos', [this.finalPosition, this.rollRotation, this.raduis]);\r\n    },\r\n\r\n    setScale: function () {\r\n        var index = this.knifeCountComp.index;\r\n        var newScale = 0.02 * index + 1;\r\n        newScale = newScale > 1.5 ? 1.5 : newScale;\r\n        if (this.node.scale !== newScale) this.node.scale = newScale;\r\n    },\r\n\r\n    updateMoveLogic: function (dt) {\r\n        this.updateRotate(dt);\r\n        this.updateChangeToAttack(dt);\r\n        this.updateChangeToDefence(dt);\r\n\r\n        // if (this.isSpider) {\r\n        //     console.log(this.isSpider);\r\n        // }\r\n\r\n        var nodePosition = this.node.position;\r\n        if (!this.finalPosition) return;\r\n        if (Tools.compareVec2(this.finalPosition, nodePosition)) return;\r\n        // if (Tools.isFloatEqual(this.finalPosition.x, nodePosition.x) &&\r\n        // Tools.isFloatEqual(this.finalPosition.y, nodePosition.y)) return;\r\n\r\n        var dir = this.finalPosition.sub(nodePosition);\r\n        var distance = dir.mag();\r\n        this.moveDistance = this.changeSpeed * dt;\r\n        if (this.isAdjust) {\r\n            if (this.isMore) {\r\n                this.moveDistance = this.adjustMoreSpeed * dt;\r\n            } else {\r\n                this.moveDistance = this.adjustLessSpeed * dt;\r\n            }\r\n        }\r\n\r\n        if (this.isInit) {\r\n            this.moveDistance = this.initSpeed * dt;\r\n        }\r\n\r\n        if (this.isCapture) {\r\n            this.moveDistance = this.captureSpeed * dt;\r\n        }\r\n\r\n        if (this.isRelease) {\r\n            this.moveDistance = this.releaseSpeed * dt;\r\n        }\r\n        if (this.isNEZHA) {\r\n            this.moveDistance = this.nezhaSpeed * dt;\r\n            this.acceleration += 200 * dt;\r\n            this.moveDistance += this.acceleration;\r\n        } else {\r\n            this.acceleration += 50 * dt;\r\n            this.moveDistance += this.acceleration;\r\n        }\r\n\r\n\r\n        this.node.position = nodePosition.add(dir.mul(this.moveDistance / distance));\r\n        if (Tools.compareVec2(this.finalPosition, this.node.position) || this.moveDistance >= distance) {\r\n            this.node.position = this.finalPosition;\r\n            // this.finalPosition = null;\r\n            if (this.isAdjust) {\r\n                this.isAdjust = false;\r\n            }\r\n\r\n            if (this.isInit) {\r\n                this.isInit = false;\r\n            }\r\n\r\n            if (this.isCapture) {\r\n                this.isCapture = false;\r\n                this.node.emit('updateMomentState', KnifeMomentState.CaptureFinish)\r\n            }\r\n            if (this.isRelease) {\r\n                this.lastRotation = this.isDefence ? this.node.rotation - 720 : this.node.rotation + 720;\r\n                var finalRotation = this.node.rotation;\r\n                // var action = cc.rotateBy(0.5, this.releaseRotation / 2);\r\n                // var func = cc.callFunc(() => {\r\n                //     this.node.emit('updateState', KnifeState.Normal);\r\n                //     this.node.emit('updateMomentState', KnifeMomentState.ReleaseFinish)\r\n                //     this.isRelease = false;\r\n                // })\r\n                this.rollCallback = () => {\r\n                    this.node.emit('updateState', KnifeState.Normal);\r\n                    this.node.emit('updateMomentState', KnifeMomentState.ReleaseFinish)\r\n                    this.node.rotation = finalRotation;\r\n                    this.lastRotation = finalRotation;\r\n                    this.isRelease = false;\r\n                };\r\n                // this.node.runAction(cc.sequence(action, func));\r\n            }\r\n            if (this.isNEZHA) {\r\n                this.isNEZHA = false;\r\n                if (this.rollCallback) {\r\n                    this.rollCallback();\r\n                    this.rollCallback = null;\r\n                }\r\n            }\r\n        }\r\n        // if (this.moveDistance < distance) {\r\n        // } else {\r\n        // }\r\n    },\r\n\r\n    // updateDance: function (dt) {\r\n    //     if (this.node.parent.children.length < 3) {\r\n    //         this.startDance = false;\r\n    //         // this.node.rotation = 180;\r\n    //     }\r\n    //     if (this.startDance) {\r\n    //         // console.log(this.danceIndex, this.node.rotation, this.danceRoll, this.danceRollAdd)\r\n    //         if (this.danceIndex % 4 === 0) {\r\n    //             this.node.rotation += this.danceRoll;\r\n    //         } else if (this.danceIndex % 4 === 1) {\r\n    //             this.node.rotation -= this.danceRoll;\r\n    //         } else if (this.danceIndex % 4 === 2) {\r\n    //             this.node.rotation -= this.danceRoll;\r\n    //         } else if (this.danceIndex % 4 === 3) {\r\n    //             this.node.rotation += this.danceRoll;\r\n    //             this.danceRoll += this.danceRollAdd;\r\n    //         }\r\n    //         this.danceIndex++;\r\n    //     }\r\n    // }\r\n});"]}