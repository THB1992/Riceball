{"version":3,"sources":["HeroMoveFix.js"],"names":["Tools","require","cc","Class","extends","Component","properties","lastPos","v2","_collider","_collisionBlocks","_fixDir","_minX","_maxX","_minY","_maxY","_collisionFix","_offset","_wallColliders","onLoad","init","initWalls","walls","wall","push","getComponent","wallCollider","refresh","detail","fixByBlock","arrContains","updateGameLogic","dt","x","node","position","y","fixPositionByWall","block","fixPositionByBlock","checkNeedDie","reset","radius","parent","scale","worldPos","convertToWorldSpaceAR","relativePos","convertToNodeSpaceAR","fixDir","moveLength","size","width","n","Math","abs","height","anchor","sub","normalize","mag","targetRot","rotate","rotation","add","mul","other","self","tag","pos","die","emit","_collisionWalls"],"mappings":"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","file":"HeroMoveFix.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\move","sourcesContent":["/**\n * @fileoverview 玩家移动校正\n * @author jinhaitao@gameley.cn (金海涛)\n */\nconst Tools = require('Tools');\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        lastPos: cc.v2(0, 0),\n        // _collisionWalls: [],\n        _collider: null,\n        _collisionBlocks: [],\n        _fixDir: null,\n        _minX: null,\n        _maxX: null,\n        _minY: null,\n        _maxY: null,\n\n        _collisionFix: [],\n        _offset: 6,\n        _wallColliders: [],\n    },\n\n    onLoad: function () {\n        // this.node.on('fixByWall', this.fixByWall, this);\n        // this.node.on('fixByBlock', this.fixByBlock, this);\n    },\n\n    init: function (_collider) {\n        this._collider = _collider;\n    },\n\n    initWalls: function (walls) {\n        this._wallColliders = [];\n        for (var wall of walls) {\n            this._wallColliders.push(wall.getComponent('EntityWall').wallCollider);\n        }\n    },\n    // 将碰撞存至list中，update中修改\n    refresh: function (detail) {\n\n    },\n\n    fixByBlock: function (detail) {\n        if (!Tools.arrContains(this._collisionBlocks, detail)) {\n            this._collisionBlocks.push(detail);\n        }\n    },\n\n    updateGameLogic: function (dt) {\n        if (this.lastPos.x === this.node.position.x && this.lastPos.y === this.node.position.y) {\n            return;\n        }\n        this.lastPos = this.node.position;\n\n\n        for (var wall of this._wallColliders) {\n            this.fixPositionByWall(wall);\n        }\n\n        for (var block of this._collisionBlocks) {\n            this.fixPositionByBlock(block);\n        }\n\n        this.checkNeedDie();\n        this.reset();\n    },\n\n    fixPositionByBlock: function (block) {\n        var radius = this._collider.radius * this._collider.node.parent.scale;\n        var worldPos = this.node.convertToWorldSpaceAR(this._collider.node.position);\n        var relativePos = block.node.convertToNodeSpaceAR(worldPos);\n        var fixDir = null;\n        var moveLength = 0;\n        if (relativePos.x <= block.size.width / 2 && relativePos.x >= -block.size.width / 2) {\n            var n = (relativePos.y >= 0 ? 1 : -1);\n            fixDir = cc.v2(0, n);\n            moveLength = Math.abs(relativePos.y) - (block.size.height / 2 + radius);\n        } else if (relativePos.y <= block.size.height / 2 && relativePos.y >= -block.size.height / 2) {\n            var n = (relativePos.x >= 0 ? 1 : -1);\n            fixDir = cc.v2(n, 0);\n            moveLength = Math.abs(relativePos.x) - (block.size.width / 2 + radius);\n        } else {\n            var anchor = cc.v2((relativePos.x >= 0 ? 1 : -1) * block.size.width / 2, (relativePos.y >= 0 ? 1 : -1) * block.size.height / 2);\n            fixDir = relativePos.sub(anchor).normalize();\n            moveLength = relativePos.sub(anchor).mag() - radius;\n        }\n        if (moveLength > 0) {\n            return;\n        }\n        var targetRot = fixDir.rotate(block.node.rotation);\n        moveLength -= this._offset;\n        this.node.position = this.node.position.add(targetRot.mul(-moveLength));\n    },\n\n    fixPositionByWall: function (wall) {\n        var other = wall;\n        var self = this._collider;\n        switch (other.tag) {\n            case 0: // 上\n                this._maxY = other.node.parent.y - other.size.height / 2 - self.radius * self.node.parent.scale - this._offset;\n                if (this.node.y > this._maxY) {\n                    this.node.y = this._maxY;\n                }\n\n                break;\n            case 1: // 下\n                this._minY = other.node.parent.y + other.size.height / 2 + self.radius * self.node.parent.scale + this._offset;\n                if (this.node.y < this._minY) {\n                    this.node.y = this._minY;\n                }\n                break;\n            case 2: // 左\n                this._minX = other.node.parent.x + other.size.width / 2 + self.radius * self.node.parent.scale + this._offset;\n                if (this.node.x < this._minX) {\n                    this.node.x = this._minX;\n                }\n                break;\n            case 3: // 右\n                this._maxX = other.node.parent.x - other.size.width / 2 - self.radius * self.node.parent.scale - this._offset;\n                if (this.node.x > this._maxX) {\n                    this.node.x = this._maxX;\n                }\n                break;\n        }\n\n    },\n\n    checkNeedDie: function () {\n        var pos = this.node.position;\n        if ((this._minX !== null && pos.x < this._minX- 1) || (this._maxX !== null && pos.x > this._maxX+ 1) ||\n            (this._minY !== null && pos.y < this._minY- 1) || (this._maxY !== null && pos.y > this._maxY+ 1)) {\n            this.die();\n        }\n    },\n\n    die: function () {\n        this.node.emit('die');\n    },\n\n    // 修正后重置\n    reset: function () {\n        this._collisionWalls = [];\n        this._collisionBlocks = [];\n        this._collisionFix = [];\n        this._minX = null;\n        this._maxX = null;\n        this._minY = null;\n        this._maxY = null;\n    }\n})"]}