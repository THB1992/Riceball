{"version":3,"sources":["BodyRectComponent.js"],"names":["Tools","require","BodyRectComponent","cc","Class","extends","Component","properties","_rect","rect","init","width","height","canMove","needGraphics","scale","node","x","y","_canMove","ctx","getOrAddComponent","Graphics","lineWidth","strokeColor","Color","RED","stroke","on","setRect","radius","Math","max","update","dt","center","position","clear","contains","point","intersects","getRect"],"mappings":";;;;;;AAAA;;;;;AAKA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;;AAEA;AACA,IAAMC,oBAAoBC,GAAGC,KAAH,CAAS;AAC/BC,aAASF,GAAGG,SADmB;;AAG/BC,gBAAY;AACRC,eAAOL,GAAGM;AADF,KAHmB;;AAO/BC,UAAM,cAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAqE;AAAA,YAAnCC,YAAmC,uEAApB,KAAoB;AAAA,YAAbC,KAAa,uEAAL,GAAK;;AACvE,aAAKA,KAAL,GAAaA,KAAb;AACAJ,gBAAQA,QAAQI,KAAhB;AACAH,iBAASA,SAASG,KAAlB;AACA,aAAKP,KAAL,GAAa,IAAIL,GAAGM,IAAP,CAAY,KAAKO,IAAL,CAAUC,CAAV,GAAcN,QAAQ,CAAlC,EAAqC,KAAKK,IAAL,CAAUE,CAAV,GAAcN,SAAS,CAA5D,EAA+DD,KAA/D,EAAsEC,MAAtE,CAAb;AACA,aAAKO,QAAL,GAAgBN,OAAhB;;AAEA,aAAKC,YAAL,GAAoBA,YAApB;;AAEA,YAAG,KAAKA,YAAR,EAAsB;AAClB,iBAAKM,GAAL,GAAWpB,MAAMqB,iBAAN,CAAwB,KAAKL,IAA7B,EAAmCb,GAAGmB,QAAtC,CAAX;;AAEA;AACA,iBAAKF,GAAL,CAASG,SAAT,GAAqB,CAArB;AACA,iBAAKH,GAAL,CAASI,WAAT,GAAuBrB,GAAGsB,KAAH,CAASC,GAAhC;AACA,iBAAKN,GAAL,CAASX,IAAT,CAAe,CAAC,KAAKD,KAAL,CAAWG,KAAZ,GAAoB,CAAnC,EAAsC,CAAC,KAAKH,KAAL,CAAWI,MAAZ,GAAqB,CAA3D,EAA+D,KAAKJ,KAAL,CAAWG,KAA1E,EAAiF,KAAKH,KAAL,CAAWI,MAA5F;AACA,iBAAKQ,GAAL,CAASO,MAAT;AACH;;AAED,aAAKX,IAAL,CAAUY,EAAV,CAAa,cAAb,EAA6B,KAAKC,OAAlC,EAA2C,IAA3C;AACH,KA3B8B;;AA6B/BA,aAAS,iBAAUC,MAAV,EAAkB;AACvBA,iBAASC,KAAKC,GAAL,CAASF,MAAT,EAAiB,GAAjB,CAAT;AACA,aAAKtB,KAAL,CAAWG,KAAX,GAAmBmB,SAAS,KAAKf,KAAd,GAAsB,CAAzC;AACA,aAAKP,KAAL,CAAWI,MAAX,GAAoBkB,SAAS,KAAKf,KAAd,GAAsB,CAA1C;AACA;AACH,KAlC8B;;AAoC/B;;AAEAkB,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAG,KAAKf,QAAR,EAAkB;AACd,iBAAKX,KAAL,CAAW2B,MAAX,GAAoB,KAAKnB,IAAL,CAAUoB,QAA9B;;AAEA,gBAAG,KAAKtB,YAAR,EAAsB;AAClB,qBAAKM,GAAL,CAASiB,KAAT;AACA;AACA,qBAAKjB,GAAL,CAASX,IAAT,CAAe,CAAC,KAAKD,KAAL,CAAWG,KAAZ,GAAoB,CAAnC,EAAsC,CAAC,KAAKH,KAAL,CAAWI,MAAZ,GAAqB,CAA3D,EAA+D,KAAKJ,KAAL,CAAWG,KAA1E,EAAiF,KAAKH,KAAL,CAAWI,MAA5F;AACA,qBAAKQ,GAAL,CAASO,MAAT;AACH;AACJ;AACJ,KAjD8B;;AAmD/BW,cAAU,kBAAUC,KAAV,EAAiB;AACvB,eAAO,KAAK/B,KAAL,CAAW8B,QAAX,CAAoBC,KAApB,CAAP;AACH,KArD8B;;AAuD/BC,gBAAY,oBAAU/B,IAAV,EAAgB;AACxB,eAAO,KAAKD,KAAL,CAAWgC,UAAX,CAAsB/B,IAAtB,CAAP;AACH,KAzD8B;;AA2D/BgC,aAAS,mBAAY;AACjB,eAAO,KAAKjC,KAAZ;AACH;AA7D8B,CAAT,CAA1B","file":"BodyRectComponent.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\player","sourcesContent":["/**\n * @fileoverview 身体矩形，用于简单判断是否发生碰撞\n * @author meifan@gameley.cn (梅凡)\n */\n\nconst Tools = require('Tools');\n\n// result从PlayerDistanceSystem确定，是另一个ai的Entity\nconst BodyRectComponent = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _rect: cc.rect,\n    },\n\n    init: function (width, height, canMove, needGraphics = false, scale = 1.0) {\n        this.scale = scale;\n        width = width * scale;\n        height = height * scale;\n        this._rect = new cc.rect(this.node.x - width / 2, this.node.y - height / 2, width, height);\n        this._canMove = canMove;\n\n        this.needGraphics = needGraphics;\n\n        if(this.needGraphics) {\n            this.ctx = Tools.getOrAddComponent(this.node, cc.Graphics);\n    \n            // 红色矩形\n            this.ctx.lineWidth = 6;\n            this.ctx.strokeColor = cc.Color.RED;\n            this.ctx.rect( -this._rect.width / 2, -this._rect.height / 2,  this._rect.width, this._rect.height);\n            this.ctx.stroke();\n        }\n\n        this.node.on('radiusChange', this.setRect, this);\n    },\n\n    setRect: function (radius) {\n        radius = Math.max(radius, 180);\n        this._rect.width = radius * this.scale * 2;\n        this._rect.height = radius * this.scale * 2;\n        // console.log('radius: ' + radius + ', width: ' +  this._rect.width + ', height: ' +  this._rect.height);\n    },\n\n    // updateGameLogic: function (dt) {}\n\n    update: function (dt) {\n        if(this._canMove) {\n            this._rect.center = this.node.position;\n\n            if(this.needGraphics) {\n                this.ctx.clear ();\n                // 红色矩形\n                this.ctx.rect( -this._rect.width / 2, -this._rect.height / 2,  this._rect.width, this._rect.height);\n                this.ctx.stroke();\n            }\n        }\n    },\n\n    contains: function (point) {\n        return this._rect.contains(point);\n    },\n\n    intersects: function (rect) {\n        return this._rect.intersects(rect);\n    },\n\n    getRect: function () {\n        return this._rect;\n    }\n});"]}