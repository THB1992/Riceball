{"version":3,"sources":["FollowCameraCtrl.js"],"names":["Tools","require","FollowCameraCtrl","cc","Class","extends","Component","properties","targetNode","Node","camera","Camera","_marginX","_marginY","_currentVelocityX","_currentVelocityY","_maxSpeed","Number","MAX_VALUE","_smoothTime","_moveLimitRect","rect","_moveCamreaRate","_curCameraRate","_targetCameraRate","_currentVelocityRate","cleanUp","node","position","v2","init","mapRect","canvas","find","width","height","x","y","targetPos","targetX","clamp","xMin","xMax","targetY","yMin","yMax","resetTargetNode","setTimeout","resetCameraRate","lateUpdate","dt","dataX","smoothDamp","dataY","dataRate","zoomRatio"],"mappings":"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","file":"FollowCameraCtrl.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\component\\singleton","sourcesContent":["/**\n * @fileoverview FollowCameraCtrl类的实现\n * @author jinhaitao@gameley.cn (金海涛)\n */\nconst Tools = require(\"Tools\");\n\n\n/**\n * 相机跟随组件，添加该组件后，节点会跟随目标节点平滑移动\n */\nvar FollowCameraCtrl = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        /** 目标跟随节点 */\n        targetNode: cc.Node,\n        camera: cc.Camera,\n        /** 边距 */\n        _marginX: 640,\n        _marginY: 400,\n\n        /** 当前x方向速率 */\n        _currentVelocityX: 0,\n        /** 当前y方向速率 */\n        _currentVelocityY: 0,\n        /** 最大移动速度 */\n        _maxSpeed: Number.MAX_VALUE,\n        /** 缓动时间 */\n        _smoothTime: 0.3,\n        /** 限制移动区域 */\n        _moveLimitRect: cc.rect,\n\n        _moveCamreaRate: 1,\n        _curCameraRate: 1,\n        _targetCameraRate: -1,\n        _currentVelocityRate: 0,\n    },\n\n    cleanUp: function () {\n        this.node.position = cc.v2(0,0);\n        this.targetNode = null;\n    },\n\n    /**\n     * 初始化相机可移动范围\n     * @param {NodeBase} targetNode\n     */\n    init: function (targetNode, mapRect) {\n        var canvas = cc.find(\"Canvas\");\n        this._marginX = canvas.width / 10;\n        this._marginY = canvas.height / 10;\n        this.targetNode = targetNode;\n        this._moveLimitRect = new cc.rect(mapRect.x + this._marginX, mapRect.y + this._marginY, mapRect.width - 2 * this._marginX, mapRect.height - 2 * this._marginY);\n        const targetPos = this.targetNode.position;\n        const targetX = Tools.clamp(this._moveLimitRect.xMin, this._moveLimitRect.xMax, targetPos.x);\n        const targetY = Tools.clamp(this._moveLimitRect.yMin, this._moveLimitRect.yMax, targetPos.y);\n        this.node.position = cc.v2(targetX, targetY);\n\n        // 快速跟着玩家中心\n        this._moveCamreaRate = 100;\n    },\n\n    resetTargetNode: function (targetNode) {\n        this.targetNode = targetNode;\n        setTimeout(() => {\n            this._targetCameraRate = 1.6;\n        }, 200);\n        this._moveCamreaRate = 2;\n    },\n\n    resetCameraRate: function () {\n        this._targetCameraRate = 1;\n    },\n\n    /**\n     * 根据当前位置，目标节点位置以及速率设置新的位置\n     * @override  \n     */\n    lateUpdate: function (dt) {\n        if (!this.targetNode) {\n            return;\n        }\n\n        if (!this._moveLimitRect) {\n            return;\n        }\n\n        // this.updateCameraRate();\n\n        const targetPos = this.targetNode.position;\n        const targetX = Tools.clamp(this._moveLimitRect.xMin, this._moveLimitRect.xMax, targetPos.x);\n        const targetY = Tools.clamp(this._moveLimitRect.yMin, this._moveLimitRect.yMax, targetPos.y);\n        const dataX = Tools.smoothDamp(this.node.position.x, targetX, this._currentVelocityX, this._smoothTime, this._maxSpeed, this._moveCamreaRate * dt);\n        const dataY = Tools.smoothDamp(this.node.position.y, targetY, this._currentVelocityY, this._smoothTime, this._maxSpeed, this._moveCamreaRate * dt);\n\n        if (this._targetCameraRate > 0) {\n            const dataRate = Tools.smoothDamp(this._curCameraRate, this._targetCameraRate, this._currentVelocityRate, this._smoothTime, this._maxSpeed, 1.4 * dt);\n            this._currentVelocityRate = dataRate[1];\n            this._curCameraRate = dataRate[0];\n            this.camera.zoomRatio = this._curCameraRate;\n        }\n\n        this._currentVelocityX = dataX[1];\n        this._currentVelocityY = dataY[1];\n        this.node.position = cc.v2(dataX[0], dataY[0]);\n\n\n\n    },\n\n    // updateCameraRate: function () {\n\n    //     if (!this.targetStateComp) this.targetStateComp = this.targetNode.getComponent('EntityPlayer').followPlayer.knivesCmp;\n    //     var count = this.targetStateComp.knives.length;\n    //     var realCount = 0;\n    //     var min = 4;\n    //     var max = 30;\n    //     if (count < min) {\n    //         realCount = 0;\n    //     } else if (count < max) {\n    //         realCount = count - min;\n    //     } else {\n    //         realCount = max - min;\n    //     }\n    //     this._targetCameraRate = 1 - realCount * 0.01;\n\n    //     var isMove = this.targetStateComp.isMove;\n    //     this._targetCameraRate = isMove ? this._targetCameraRate : this._targetCameraRate * 1.5;\n\n\n    // },\n});"]}