{"version":3,"sources":["EntityWall.js"],"names":["EntityBase","require","cc","Class","extends","Component","properties","spriteNode","Node","lightNode","bgNode","redLightNode","redBgNode","blackNode","redNode","wallCollider","Collider","moveSpeed","init","tag","width","height","node","scaleX","size","rotation","scaleY","setMoveSpeed","speed","startRedBg","active","closeRedBg","updateGameLogic","dt","y","x"],"mappings":"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","file":"EntityWall.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\battle\\entity","sourcesContent":["/**\n * @fileoverview 墙实体\n * @author jinhaitao@gameley.cn (金海涛)\n */\nconst EntityBase = require('EntityBase');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        spriteNode: cc.Node,\n        lightNode: cc.Node,\n        bgNode: cc.Node,\n        redLightNode: cc.Node,\n        redBgNode: cc.Node,\n        blackNode: cc.Node,\n        redNode: cc.Node,\n        wallCollider: cc.Collider,\n\n        moveSpeed: 0,\n    },\n\n    init: function (tag, width, height) {\n        this.wallCollider.tag = tag; //设置碰撞tag，便于碰撞时区分撞上哪面墙\n\n        switch (tag) {\n            case 0:\n                this.wallCollider.node.scaleX = width / this.wallCollider.size.width;\n                this.lightNode.width = width;\n                this.bgNode.width = width;\n                this.redLightNode.width = width;\n                this.redBgNode.width = width;\n\n                this.spriteNode.rotation = 180;\n                this.blackNode.width = width * 2;\n                this.redNode.width = width * 2;\n                break;\n            case 1:\n                this.wallCollider.node.scaleX = width / this.wallCollider.size.width;\n                this.lightNode.width = width;\n                this.bgNode.width = width;\n                this.redLightNode.width = width;\n                this.redBgNode.width = width;\n\n                this.spriteNode.rotation = 0;\n                this.blackNode.width = width * 2;\n                this.redNode.width = width * 2;\n                break;\n            case 2:\n                this.wallCollider.node.scaleY = height / this.wallCollider.size.height;\n                this.lightNode.width = height;\n                this.bgNode.width = height;\n                this.redLightNode.width = height;\n                this.redBgNode.width = height;\n\n                this.spriteNode.rotation = 90;\n                this.blackNode.width = height * 2;\n                this.redNode.width = height * 2;\n                break;\n            case 3:\n                this.wallCollider.node.scaleY = height / this.wallCollider.size.height;\n                this.lightNode.width = height;\n                this.bgNode.width = height;\n                this.redLightNode.width = height;\n                this.redBgNode.width = height;\n\n                this.spriteNode.rotation = 270;\n                this.blackNode.width = height * 2;\n                this.redNode.width = height * 2;\n                break;\n        }\n\n    },\n\n\n    setMoveSpeed: function (speed) {\n        this.moveSpeed = speed;\n    },\n\n    startRedBg: function () {\n        if (this.lightNode.active) this.lightNode.active = false;\n        if (!this.redLightNode.active) this.redLightNode.active = true;\n        if (!this.redBgNode.active) this.redBgNode.active = true;\n        if (!this.redNode.active) this.redNode.active = true;\n    },\n\n    closeRedBg: function () {\n        if (!this.lightNode.active) this.lightNode.active = true;\n        if (this.redLightNode.active) this.redLightNode.active = false;\n        if (this.redBgNode.active) this.redBgNode.active = false;\n        if (this.redNode.active) this.redNode.active = false;\n    },\n\n    updateGameLogic(dt) {\n        switch (this.wallCollider.tag) {\n            case 0:\n                this.node.y -= this.moveSpeed * dt;\n                break;\n            case 1:\n                this.node.y += this.moveSpeed * dt;\n                break;\n            case 2:\n                this.node.x += this.moveSpeed * dt;\n                break;\n            case 3:\n                this.node.x -= this.moveSpeed * dt;\n                break;\n        }\n        this.lightNode.width -= this.moveSpeed * dt * 2;\n        this.lightNode.x += this.moveSpeed * dt;\n        this.bgNode.width -= this.moveSpeed * dt * 2;\n\n        this.redLightNode.width -= this.moveSpeed * dt * 2;\n        this.redBgNode.width -= this.moveSpeed * dt * 2;\n    },\n\n});"]}