const child_process = require("child_process");
const path = require('path');
const fs = require('fs');
const rimraf = require('rimraf');
const md5File = require('md5-file');
const ncp = require('ncp').ncp;
const os = require('os');
const archiver = require('archiver');
const crypto = require('crypto');

function log (str) {
    Editor.log(str);
}

function success (str) {
    Editor.success(str);
}

function error (str) {
    Editor.error(str);
}

var tool = {

    /**
     * 编辑文本文件
     * @param {string} filePath 文件路径
     * @param {function} editFunc 字符串编辑方法
     * @param {string} editFunc.str 需要编辑的字符串
     * @param {string} editFunc.return 编辑后的字符串
     */
    editTextFile: function (filePath, editFunc) {
        log(`修改文件:${path.basename(filePath)}  完整路径:${filePath}`);
        if (fs.existsSync(filePath)) {
            let str = fs.readFileSync(filePath, 'utf8');
            if (str && str.length > 0) {
                if (editFunc) {
                    str = editFunc(str);
                    if (str) {
                        fs.writeFileSync(filePath, str);
                    }
                }
            }
        } else {
            error(`${path.basename(filePath)} 不存在`);
        }
    },

    /**
     * 获取包含md5和后缀名的文件完整路径
     * @param {string} dirPath 目录路径
     * @param {string} filePath 文件相对于目录子路径，相对于，不包含md5和后缀名
     */
    getFilePathWithMd5: function(dirPath, filePath) {
        let subDirPath = '';
        if (filePath.indexOf('/') >= 0) {
            subDirPath = path.dirname(filePath);
            dirPath = path.join(dirPath, subDirPath);
        }
        let fileName = path.basename(filePath);
        const files = fs.readdirSync(dirPath);
        for (const file of files) {
            // log('loop file:' + file);
            if (file.startsWith(fileName)) {
                return (subDirPath.length > 0 ? subDirPath + '/' : '') + path.basename(file); // 此处不能使用join，require中路径统一使用'/'分隔
            }
        }
        return filePath;
    },

    /**
     * 删除文件
     * @param {string} dirPath 目录路径
     * @param {string} filePath 文件子路径，不带md5和后缀名
     * @param {function} callback 回调
     */
    deleteFile: function(dirPath, filePath, callback) {
        filePath = path.join(dirPath, getFilePathWithMd5(dirPath, filePath));
        deleteWithPath(filePath, callback);
    },
    
    /**
     * 删除文件或文件夹
     * @param {string} deletePath 路径
     * @param {function} callback 回调
     */
    deleteWithPath: function(deletePath, callback) {
        if (fs.existsSync(deletePath)) {
            rimraf(deletePath, (error) => {
                if (error) {
                    error('delete error:' + error);
                } else {
                    log('成功删除:' + deletePath);
                }
                if (callback) {
                    callback(error);
                }
            });
        } else {
            if (callback) callback(null);
        }
    },

    /**
     * 执行shell命令
     * @param {string} cmd 命令
     * @param {Array<string>} params 参数
     * @param {function} [callback] 执行完成回调
     * @param {boolean} [isPrintStdOut] 是否打印标准输出
     * @param {boolean} [isPrintStdError] 是否打印错误输出
     */
    runShell: function(cmd, params, callback = null, isPrintStdOut = false, isPrintStdError = true) {
        var childprocess = child_process.spawn(
            cmd,
            params, {
                timeout: 3654321,
                env: process.env
            }
        );
    
        childprocess.stdout.on('data', (data) => {
            if (isPrintStdOut) {
                log(`${cmd} stdout: ${data}`);
            }
        });
    
        childprocess.stderr.on('data', (data) => {
            if (isPrintStdError) {
                log(`${cmd} stderr: ${data}`);
            }
        });
    
        childprocess.on('close', (code) => {
            log(`${cmd} 执行完成，子进程退出码：${code}`);
            if (callback) {
                callback();
            }
        });
    },

    mkDirByPathSync: function(targetDir, isRelativeToScript = false, dirname = null) {
        const sep = path.sep;
        const initDir = path.isAbsolute(targetDir) ? sep : '';
        const baseDir = isRelativeToScript ? (dirname ? dirname : __dirname) : '.';
    
        return targetDir.split(sep).reduce((parentDir, childDir) => {
            const curDir = path.resolve(baseDir, parentDir, childDir);
            try {
                fs.mkdirSync(curDir);
            } catch (err) {
                if (err.code === 'EEXIST') { // curDir already exists!
                    return curDir;
                }
    
                // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.
                if (err.code === 'ENOENT') { // Throw the original parentDir error on curDir `ENOENT` failure.
                    throw new Error(`EACCES: permission denied, mkdir '${parentDir}'`);
                }
    
                const caughtErr = ['EACCES', 'EPERM', 'EISDIR'].indexOf(err.code) > -1;
                if (!caughtErr || caughtErr && curDir === path.resolve(targetDir)) {
                    throw err; // Throw if it's just the last created dir.
                }
            }
    
            return curDir;
        }, initDir);
    },

    replaceProjectFunc: function (str) {
        //	str = str.replace(/ /g, '');

    //	str = str.replace(/AudioPlayer/g, 'YinPinCtrl');
        str = str.replace(/AudioType/g, 'YinPinLeiXing');
        str = str.replace(/playMusic/g, 'bofangYinYue');
        str = str.replace(/playEffect/g, 'bofanhgYinXiao');
        
        str = str.replace(/AdvertMgr/g, 'GuangGaoCtrl');
        str = str.replace(/sendBiRequest/g, 'upDaShuJu');
        str = str.replace(/showAdver/g, 'bofangGuangGao');
            
        str = str.replace(/PlatformMgr/g, 'PingTaiCtrl');
        str = str.replace(/ShareMgr/g, 'FenXiangCtrl');
        str = str.replace(/RechargeMgr/g, 'ZhiFuCtrl');
        str = str.replace(/UpdateMgr/g, 'GengXinCtrl');
        str = str.replace(/GameEnum/g, 'YouXiLeiXing');
        str = str.replace(/PlatformEnum/g, 'PingTaiLeiXing');
        str = str.replace(/SkillEnum/g, 'JiNengLeiXing');
        str = str.replace(/SubDomainEnum/g, 'ZiYuLeiXing');
    //	str = str.replace(/News/g, 'GaoGeDaXinWen');
        str = str.replace(/PlayerData/g, 'WanJiaShuJu');
        str = str.replace(/SeasonMgr/g, 'SaiJiCtrl');
        str = str.replace(/SeasonRankMgr/g, 'SaiJiPaiHangCtrl');
        str = str.replace(/GameResLoader/g, 'YouXiZiYuanCtrl');
        str = str.replace(/NodePool/g, 'JieDianHuanCunChi');
        str = str.replace(/Snapshot/g, 'KuaiZhao');
        str = str.replace(/SpineAnimPlayer/g, 'SpAnCtrl');
        str = str.replace(/SpineMultiAnimControl/g, 'SpMuAnCtrl');
        str = str.replace(/SpineReplaceRealTex/g, 'SpRepTexCtrl');
        str = str.replace(/SpineReplaceSlot/g, 'SpRepSlotCtrl');
        str = str.replace(/AnimArrowMgr/g, 'JianTouCtrl');
        str = str.replace(/AttackAnimListener/g, 'GongJiDongHuaJianTing');
        str = str.replace(/PlayerDirMgr/g, 'WanJiaFangXiangCtrl');
        str = str.replace(/PlayerEmojiMgr/g, 'WanJiaBiaoQingCtrl');
        str = str.replace(/PlayerAudioMgr/g, 'WanJiaYinXiaoCtrl');
        str = str.replace(/PlayerEffectMgr/g, 'WanJiaTeXiaoCtrl');
        str = str.replace(/PlayerHangEffectMgr/g, 'WanJiaXuanGuaTeXiaoCtrl');
        str = str.replace(/WeaponEffectMgr/g, 'WuQiTeXiaoCtrl');
        str = str.replace(/MirrorWithOwnerNode/g, 'GenZheFuJieDianQingXiangZou');
        str = str.replace(/MoveWithOwnerNode/g, 'GenZheFuJieDianZou');
        str = str.replace(/AnimHelper/g, 'BangBangDongHua');
        str = str.replace(/SortMng/g, 'HuiZhiPaiXuCtrl');
        str = str.replace(/FollowCameraCtrl/g, 'XiangJiGenSuiCtrl');
        str = str.replace(/AddEntitySys/g, 'ChuangJianShiTiXiTong');
        str = str.replace(/AttackTypeMgr/g, 'WanJiaGongJiLeiXingQieHuanCtrl');
        str = str.replace(/CullingMgr/g, 'TiChuGuanLiCtrl');
        str = str.replace(/CullingMask/g, 'TiChuLeiXing');
        str = str.replace(/CullingState/g, 'TiChuZhuangTad');
        str = str.replace(/DiscardWeaponMgr/g, 'DiuQiWuQiCtrl');
        str = str.replace(/EntityRecycleMgr/g, 'ShiTiHuiShouCtrl');
        str = str.replace(/PlayerArrowMgr/g, 'WanJiaJianTouCtrl');
        str = str.replace(/PlayerInputMgr/g, 'WanJiaShuRuCtrl');
        str = str.replace(/PoolMgr/g, 'HuanCunChiCtrl');
        str = str.replace(/QualityMgr/g, 'ZhiLiangFenJiCtrl');
        str = str.replace(/ResMgr/g, 'ZiYuanCtrl');
        str = str.replace(/DiscardWeaponStateListener/g, 'DiuQiWuQiZhuangTaiJianTing');
        str = str.replace(/PlayerState/g, 'WanJiaZhuangTaiCtrl');
        str = str.replace(/NodeBase/g, 'TongBuJieDianJiChu');
        str = str.replace(/NodeBullet/g, 'TongBuJieDianZiDan');
        str = str.replace(/NodeDartPoint/g, 'TongBuJieDianTouZhiDian');
        str = str.replace(/NodeGame/g, 'TongBuJieDianYouZi');
        str = str.replace(/NodeItem/g, 'TongBuJieDianDaoJu');
        str = str.replace(/NodeMove/g, 'TongBuJieDianYiDong');
        str = str.replace(/NodeObstacle/g, 'TongBuJieDianZhangAiWu');
        str = str.replace(/NodePlayer/g, 'TongBuJieDianWanJia');
        str = str.replace(/NodeRebornPoint/g, 'TongBuJieDianChuShengDian');
        str = str.replace(/NodeSkill/g, 'TongBuJieDianJiNeng');
        str = str.replace(/NodeSupply/g, 'TongBuJieDianBuJiDaoJu');
        str = str.replace(/NodeWeaponItem/g, 'TongBuJieDianWuQiDaoJu');
        str = str.replace(/EntityBase/g, 'ShiTiJiChu');
        str = str.replace(/EntityBullet/g, 'ShiTiZiDan');
        str = str.replace(/EntityChargeEffect/g, 'ShiTiChongNeng');
        str = str.replace(/EntityDartPoint/g, 'ShiTiTouZhiDian');
        str = str.replace(/EntityEffect/g, 'ShiTiTeXiao');
        str = str.replace(/EntityEmoji/g, 'ShiTiBiaoQing');
        str = str.replace(/EntityPlayerUI/g, 'ShiTiWanJiaJieMian');
        str = str.replace(/EntityPlayer/g, 'ShiTiWanJia');
        str = str.replace(/EntityRebornPoint/g, 'ShiTiFuHuoDian');
        str = str.replace(/EntitySoftDrink/g, 'ShiTiQiShui');
        str = str.replace(/EntitySupply/g, 'ShiTiBuJiDaoJu');
        str = str.replace(/EntityWeapon/g, 'ShiTiWuQiDaoJu');
        str = str.replace(/EntityType/g, 'ShiTiLeiXing');
        str = str.replace(/GuideEnum/g, 'YinDaoLeiXing');
        str = str.replace(/PoolEnum/g, 'HuanCunChiLeiXing');
        str = str.replace(/TaskTypes/g, 'RenWuLeiXing');
        str = str.replace(/UtilPhysics/g, 'WuLiGongJu');
            
        str = str.replace(/GuideMgr/g, 'YinDaoCtrl');
        str = str.replace(/JumpUtils/g, 'TiaoZhuanCtrl');
        
        str = str.replace(/GameStateBase/g, 'YiJiJieMianJiChu');
        str = str.replace(/LayerBase/g, 'SuoYouJieMianJiChu');
        str = str.replace(/ListItemBase/g, 'LieBiaoXiangJiChu');
        str = str.replace(/PanelBase/g, 'ErJiTanBanJiChu');
        str = str.replace(/SceneBase/g, 'ChangJingJiChu');
        str = str.replace(/^[\w]UIMgr/g, 'JieMianCtrl');
        str = str.replace(/getCurGameState/g, 'getDangQianYiJiJieMian');
        str = str.replace(/switchGameState/g, 'qieHuanYiJiJieMian');
        str = str.replace(/switchScene/g, 'qieHuanChangJing');
        str = str.replace(/addPanelByName/g, 'genJuMingZiTianJiaTanBan');
        str = str.replace(/getPanelByName/g, 'genJuMingZiHuoQuTanBan');
        str = str.replace(/showMsgBox/g, 'tanChuTiShiKuang');
        str = str.replace(/showUncloseableMsgBox/g, 'tanChuBuKeGuanBiDeTiShiKuang');
        str = str.replace(/showConfirmMsgBox/g, 'tanChuQueRenTiShiKuang');
        str = str.replace(/showTipMsgBox/g, 'tanChuFlyDaTiShiKuang');
        str = str.replace(/showTipMsg/g, 'tanChuFlyTiShiKuang');
        str = str.replace(/showRechargePanel/g, 'popPayDilog');
        str = str.replace(/showPanelConnect/g, 'popConDialog');
        str = str.replace(/hidePanelConnect/g, 'hdConDialog');
        str = str.replace(/clearPanel/g, 'clnPl');
        str = str.replace(/clearMsgBox/g, 'clnTipDialog');
        str = str.replace(/handleResponse/g, 'chuliXiaXingShuJu');
        str = str.replace(/isSuccess/g, 'woChengGongLeMei');
        str = str.replace(/onEnter/g, 'jinLaiLaEvent');
        str = str.replace(/onExit/g, 'chuQuLaEvent');
        str = str.replace(/initTransform/g, 'chuShiHuaJieDian');
        str = str.replace(/handleNetError/g, 'chuLiWangLuoCuoWu');
        str = str.replace(/runOpenAnimation/g, 'boFangDaKaiDongHua');
        str = str.replace(/runCloseAnimation/g, 'boFangGuanBiDongHua');
        str = str.replace(/gamestate/g, 'yiJiJieMianXiaoXie');
        str = str.replace(/GameState/g, 'yiJiJieMianDaXie');
        str = str.replace(/gameState/g, 'yiJiJieMianDaXiaoXie');
        str = str.replace(/loadResSprite/g, 'jiaZaiJingLingZiYuan');
        str = str.replace(/loadResHeroTex/g, 'jiaZaiYingXiongZiTuPianYuan');
        str = str.replace(/loadResGender/g, 'jiaZaiXingBieZiYuan');
        str = str.replace(/loadResRedDot/g, 'jiaZaiHongDianZiYuan');
        str = str.replace(/loadResImage/g, 'jiaZaiTuPianZiYuan');
        str = str.replace(/loadResPortrait/g, 'jiaZaiTouXiangZiYuan');
        str = str.replace(/loadResHeroType/g, 'jiaZaiYingXiongLeiXingZiYuan');
        str = str.replace(/loadResWeaponTexture/g, 'jiaZaiWuQiTuPianZiYuan');
            
        str = str.replace(/NetConnectionPomelo/g, 'WangLuoLianJieYouZi');
        str = str.replace(/NetConnection/g, 'WangLuoLianJie');
        str = str.replace(/NetEnum/g, 'WangLuoLeiXing');
        str = str.replace(/NetError/g, 'WangLuoCuoWu');
        str = str.replace(/NetJitterBuffer/g, 'WangLuoDouDongHuanCun');
        str = str.replace(/NetMgr/g, 'WangluoCtrl');
        str = str.replace(/NetPackage/g, 'WangLuoBao');
        str = str.replace(/NetRequest/g, 'WangLuoShangXing');
        str = str.replace(/NetResponse/g, 'WangLuoXiaXing');
        str = str.replace(/NetState/g, 'WangLuoZhuangTai');
        str = str.replace(/ConnectionType/g, 'WangLuoLianJieLeiXing');
        str = str.replace(/isOnlineConnect/g, 'shifouQianTaiLianJieChangTong');
        str = str.replace(/isRoomConnect/g, 'shifouYouXiLianJieChangTong');
        str = str.replace(/createOnlineRequest/g, 'chuangJianQianTaiShangXingQingQiu');
        str = str.replace(/createRoomRequest/g, 'chuangJianYouXiShangXingQingQiu');
        str = str.replace(/createRequest/g, 'chuangJianShangXingQingQiu');
        str = str.replace(/createHttpRequest/g, 'chuangJianDuanLianJieQingQiu');
        
        str = str.replace(/initWithJsonObject/g, 'genjuJieSenDuiXiangChuShiHua');
        str = str.replace(/GameRoomInfo/g, 'YouXiFangJianShuJu');
        str = str.replace(/gameRoomInfo/g, 'youXiFangJianShuJu');
        
        str = str.replace(/instance([^o])/g, 'quanJuShiLi$1');
        str = str.replace(/createItemsWithString/g, 'genjuZiFuChuanChuangJianBeiBaoWuPin');
        str = str.replace(/createItemsWithConversion/g, 'genjuConversionChuangJianBeiBaoWuPin');
        str = str.replace(/createItemWithString/g, 'genjuZiFuChuanCHuangJianWuPin');
        str = str.replace(/createItem/g, 'chuangjianWuPin');
    //	str = str.replace(/is([\w])/g, 'shifou$1');
    //	str = str.replace(/BagItem/g, 'BeiBaoWuPin');
        str = str.replace(/refreshLimitCard/g, 'shuaXinXianShiKa');
        str = str.replace(/refreshLimitBox/g, 'shuaXinXianShiHeZi');
    //	str = str.replace(/refresh/g, 'shuaxin');
        str = str.replace(/loadCfgData/g, 'jiazaiPeiZhiWenJian');
        str = str.replace(/getStore/g, 'huoquShangDian');
        str = str.replace(/getPortrait/g, 'huoquTouXiang');
        str = str.replace(/getRandom/g, 'huoquSuiJi');
        str = str.replace(/getGuide/g, 'huoquYinDao');
        
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
    //	str = str.replace(/ /g, '');
        
        return str;
    }
};

module.exports = tool;